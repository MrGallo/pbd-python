[
    {
        "section": "Basics and Printing",
        "number": 0,
        "name": "Installing Python",
        "points": "20",
        "markdown": "# Installing Python\n\nBefore you can start programming in Python, you will need the Python interpreter. The Python interpreter helps translate Python \ninto [machine code](https://en.wikipedia.org/wiki/Machine_code).\n\nPlease follow Corey Schafer's video *[Python Tutorial for Beginners 1: Install and Setup for Mac and Windows](https://www.youtube.com/watch?v=YYXdXT2l-Gg)*. He will forward you to the [Python Download](https://www.python.org/downloads/) page and show you what to do. You may also want to follow his other Python videos. They are all well done.\n\nAn Integrated Development Environment (IDE)\n-------------------------------------------\nWhen you watch the video Corey will recommend some IDEs like PyCharm and Atom. I suggest you get [VS Code](https://code.visualstudio.com/) and it's [Python Extension](https://marketplace.visualstudio.com/items?itemName=ms-python.python). It's currently the most popular IDE. Microsoft also has a *[Getting Started with Python in VS Code](https://code.visualstudio.com/docs/python/python-tutorial)* tutorial (optional).\n\nCorey Schafer also has a couple videos about VS Code specifically (optional viewing):\n- [Visual Studio Code (Windows)](https://www.youtube.com/watch?v=-nh9rCzPJ20&ab_channel=CoreySchafer)\n- [Visual Studio Code (Mac)](https://www.youtube.com/watch?v=06I63_p-2A4&ab_channel=CoreySchafer)\n\n\nWhat next?\n----------\nNext, just try the [Interpreter Check](interpreter-check.md)\nassignment to make sure everything worked.\n\n---\n\n\u00c2\u00a92021 Daniel Gallo\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "Basics and Printing",
        "number": 1,
        "name": "Interpreter Check",
        "points": "3",
        "markdown": "# Interpreter Check\n\nThis assignment is designed to make sure that the Python interpreter is correctly installed on your machine.\n\nOpen a terminal window or command prompt. \n\nWindows\n-------\nUse the search bar to find \"Command Prompt\" or \"cmd\" or \"Powershell\" and run the program. Alternatively you can hit `WindowsKey + R` and type `cmd` and click \"ok\".\n\nMac\n---\nClick the Launchpad icon in the Dock, type `Terminal` in the search field, then click Terminal. Or, in the Finder, open the `/Applications/Utilities` folder, then double-click Terminal.\n\n Article: *[Open or quit Terminal on Mac](https://support.apple.com/en-ca/guide/terminal/apd5265185d-f365-44cb-8b09-71a064a42125/mac)*.\n\nTest it out\n-----------\nNext, type the `python --version` command in your terminal.\n\n```\nMicrosoft Windows [Version 10.0.19043.1110]\n(c) Microsoft Corporation. All rights reserved. \n\nC:\\>python --version\n```\n\nYou will see one of two things. \n\n1. If the Python interpreter *is* correctly installed, you should see a version number like so:\n    ```\n    C:\\>python --version\n    Python 3.9.5\n    ```\n    The exact version number doesn't matter, as long as it starts with `3.x.x`.\n\n2. If the Python interpreter is *not* correctly installed, then you'll see an error like so:\n    ```\n    C:\\>python --version\n    'python' is not recognized as an internal or external command, operable program or batch file.\n    ```\n    The most common reason for this is when you installed Python you **did not check the `Add Python 3.x to PATH` option**. Please rewatch the [installation video](https://youtu.be/YYXdXT2l-Gg?t=427) and pay careful attention at the `7:06` mark.\n\n    If that doesn't help, please rewatch the whole video and pay careful attention to each step Corey walks through.\n\nIf you do have to re-install Python, you must close down the terminal for the changes to take effect. Open the command prompt once again and try to check the Python version once more:\n\n```\nMicrosoft Windows [Version 10.0.19043.1110]\n(c) Microsoft Corporation. All rights reserved. \n\nC:\\>python --version\nPython 3.9.5\n```\n\nSuccess!\n\n---\n\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\n\n\n\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "Basics and Printing",
        "number": 2,
        "name": "Execution Practice",
        "points": "3",
        "markdown": "# Execution Practice\n\nThis assignment is designed to give you practice running (executing) a Python program. Start by saving the following file to your classwork folder.\n\n```eval_rst\n* :download:`star_wave.py <examples/star_wave.py>`\n```\n\n(You can save the file by right-clicking and choosing \n\"`Save Target As...`\" from the context menu.)\n\nThen open up a terminal and navigate to where you saved the `star_wave.py` file.\n\n```\nMicrosoft Windows [Version 10.0.19043.1110]\n(c) Microsoft Corporation. All rights reserved.\n\nC:\\path\\to\\classwork\\folder>python star_wave.py\n*\n**\n*\n**\n***\n...\nC:\\path\\to\\classwork\\folder>\n\n```\n\nYou should see a long-running program printing out waves of stars in the terminal. To forcibly stop long-running Python scripts, press `ctrl + c`.\n\n---\n\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "Basics and Printing",
        "number": 3,
        "name": "An Important Message",
        "points": "5",
        "markdown": "# An Important Message\n\nThis exercise will show you the detailed steps you must follow\nto create your first Python program.\n\nOpen up any text editor (Notepad, TextEdit) or IDE (VS Code, PyCharm).\n\nThen, type in the code listed below. Save your file as \"`important_message.py`\". It is important you include the `.py` [file extension](https://www.howtogeek.com/356448/what-is-a-file-extension/).\n\n\n```python\nprint(\"Hello, World!\")\n```\n\n**It's important that you resist the urge to copy and paste code when you are learning**.\n\nKeep the file open; you will need it again if there are errors.\n\nOpen a command prompt. (`Win + r`, type `cmd`, click \"ok\")\nThen type, in order, the commands below.\n\n```\nC:\\path\\to\\classwork\\folder>python first_prog.py\nHello, World!\nC:\\path\\to\\classwork\\folder>\n```\n\nYou did it! Now try changing the code so that the computer displays a different message.\n\n---\n\n\u00c2\u00a92021 Daniel Gallo\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "Basics and Printing",
        "number": 4,
        "name": "Escape Artist",
        "points": "4",
        "markdown": "# Escape Artist\n\nCreate a new file called `escape_artist.py`. Manually type out the code below. Be extremely careful to type out each character correctly.\n\nYou may run the program after each line to ensure the line you typed is correct, otherwise it may be difficult to pinpoint a problem if one arises.\n\n```python\nprint(\"Hello, World!\")\nprint(\"... umm 'hi'\")\nprint('How\\'s it going?')\nprint('whoa, single quotes too?')\nprint(\"Yes.\", end=\" \")\nprint(\"Either are fine to use.\")\nprint(\"How did you..\")\nprint()\nprint(\"\\\"put two prints on one line\\\"?\")\nprint('what is the \"\\\\\" character for?')\nprint(\"To get \\\" characters in the output.\")\nprint(\"Python won't consider it as ending a string.\")\nprint('You can also use the other \" character.')\n```\n\nRun the program and examine the output to compare how it matches up with the code. If you get an error, look *very* closely at each character and compare\n\n### Next step\nGet the following string to output using `print` and the escape character (`\\`):\n```\nWhen including quotes, \" or ' in output..\nyou must use the escape character '\\'.\n\nIf you want to use '\\' in output,\nyou need to escape the escape character..\ne.g., \\\\\n```\n\nTry to get this ASCII art to print out as well:\n```\n\"\"\\_('>')_/\"\"\n```\n\n---\n\n\u00c2\u00a9 2021 Daniel Gallo\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\n\n\n"
    },
    {
        "section": "Basics and Printing",
        "number": 5,
        "name": "Comments",
        "points": "3",
        "markdown": "# Comments\n\nComments are very important in your programs. They are used to tell you what something does in English, and they also are used to disable parts of your program if you need to remove them temporarily. Here's how you use comments in Python:\n\n```python\n# Single-line comment.\n# This will be ignored by Python\n\n\"\"\"\nTripple-quotes enclose a multi-line comment.\nSometimes, if you have a lot to explain,\nthe multi-line comment can look nicer\nthan a bunch of single-line comments.\n\nEverything within the tripple-quotes will\nbe ignored as well.\n\"\"\"\n```\n\n## Your Task\nCreate a file called:\n\n`comments.py`\n\nGiven the Python code below, comment out certain lines and un-comment certain lines to get the output shown. **Don't delete any lines, just comment them out**.\n\nYou may copy and paste this code rather than manually typing it.\n\n### The Code\n```python\nprint(\"(\u00e2\u2013\u20ac\u00cc\u00bf\u00c4\u00b9\u00cc\u00af\u00e2\u2013\u20ac\u00cc\u00bf \u00cc\u00bf)\")\n# print(1)\nprint(2)\nprint(\"\\ (\u00e2\u20ac\u00a2\u00e2\u2014\u00a1\u00e2\u20ac\u00a2) /\")\nprint(3)\nprint(4)\nprint(\"( \u00cd\u00a1\u00c2\u00b0 \u00cd\u0153\u00ca\u2013 \u00cd\u00a1\u00c2\u00b0)\")\n# print(5)\n# print(6)\n# print(7)\nprint(\"\u00c2\u00af\\_(\u00e3\u0192\u201e)_/\u00c2\u00af\")\nprint(8)\nprint(9)\n# print(10)\n```\n\n### The Desired Output\n```\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n```\n\n---\n\n\n\u00c2\u00a9 2021 Daniel Gallo\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "Basics and Printing",
        "number": 6,
        "name": "A Letter to Your Principal",
        "points": "7",
        "markdown": "# A Letter to Your Principal\n\nWrite a program that displays your school principal's name and address on the screen as if it were a letter. Your output should look something like the text below.\n\nName the file:\n\n`letter_to_principal.py`\n\n\n```\n+---------------------------------------------------------+\n|                                                    #### |\n|                                                    #### |\n|                                                    #### |\n|                                                         |\n|                    Mr. Servidio                         |\n|                    St. Robert CHS                       |\n|                    8101 Leslie St                       |\n|                    Thornhill, ON                        |\n|                    L3T 7P4                              |\n|                                                         |\n+---------------------------------------------------------+\n\n```\n\nFrequently-Asked Questions\n--------------------------\n- Does my letter have to look exactly like yours?\n    - No, but it does have to look roughly like a letter, including the box around the outside and the stamp.\n- How to I get a `|` to show up on the screen?\n    - The `|` character is called a \"pipe\". Assuming you are using a normal US keyboard, it is Shift + backslash (`\\`). The backslash key is usually located between the Backspace and Enter keys.\n- Why doesn't my letter line up when I run the\n program?!? Everything looks perfect in the code!\n    - You probably used a mixture of tabs and spaces between the quotes in your `print()` functions. Many text editors / IDEs will only move the cursor 4 spaces when you press TAB. But when your program runs, any tabs embedded inside the quotes will take up 8 spaces, not 4. If you delete ALL the tabs between the quotes and replace them with spaces, things should look the same in your code and when you run the program.\n\n\n\n---\n\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "Basics and Printing",
        "number": 7,
        "name": "Your Initials",
        "points": "6",
        "markdown": "# Your Initials\n\nDisplay your initials on the screen in block letters as shown.\n\n```\nFor the name Jorge Balderama Perez...\n\nJJJJJ  BBBB   PPPP\n  J    B   B  P   P\n  J    B   B  P   P\n  J    BBBB   PPPP\nJ J    B   B  P \nJ J    B   B  P \n JJ    BBBB   P\n\n```\n\nIn case you have no idea how to make a certain letter, there are some suggestions below.\n\n\n![](images/BigLetters2.png)\n\n\n---\n\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "Basics and Printing",
        "number": 8,
        "name": "Numbers and Math",
        "points": "7",
        "markdown": "# Numbers and Math\n\nEvery programming language has some kind of way of doing numbers and math. Don't worry, programmers lie frequently about being math geniuses when they really aren't. Although it helps to have a strong background in mathematics, high-level math doesn't enter into the daily life of an average software developer.\n\n\nThis exercise has lots of math symbols so let's name them right away so you know what they're called. As you type this one in, say the names. When saying them feels boring you can stop saying them. Here are the names:\n\n\n| Symbol | Name | Operation |\n| ------ | ---- | --------- |\n| `+` | plus |  |\n| `-` | minus |  |\n| `/` | slash |  |\n| `//` | double slash |  |\n| `*` | asterisk |  |\n| `%` | percent |  |\n\n\nNotice how the \"Operation\" column is blank? After you type in the code for this exercise, figure out what each of these does and complete the table. For example, `+` does addition.\n\nCreate a file called:\n\n`numbers_and_math.py`\n\n```python\nprint(\"I have a class of 33 students.\")\nprint(\"There are 11 girls, so that means..\")\nprint(\"there are \" + str(33 - 11) + \" boys.\")\nprint()\nprint(f\"That means {11 / 33} % are girls...\")\nprint(\"and {} % are boys.\".format((33 - 11) / 33))\nprint()\nprint(\"If we made groups of six...\")\nprint(f\"There would be {33 // 6} groups of six.\")\nprint(f\"And then a smaller group of {33 % 6} people.\")\nprint(\"-\" * 30)\nprint(\"If we had 17 apples and 3 people...\")\nprint(f\"Each person would get {17 // 3} whole apples.\")\nprint(\"There would be \" + str(17 % 3) + \" apples remaining.\")\nprint()\nprint(\"If we charged each person $2 each for their 5 apples..\")\nprint(\"they would each pay ${}.\".format(2 * 5))\n\n```\n\nWhat You Should See\n-------------------\n\n```\nI have a class of 33 students.\nThere are 11 girls, so that means..\nthere are 22 boys.\n\nThat means 0.3333333333333333 % are girls...\nand 0.6666666666666666 % are boys.\n\nIf we made groups of six...\nThere would be 5 groups of six.\nAnd then a smaller group of 3 people.\n------------------------------\nIf we had 17 apples and 3 people...\nEach person would get 5 whole apples.\nThere would be 2 apples remaining.\n\nIf we charged each person $2 each for their 5 apples..\nthey would each pay $10.\n```\n\nWhat You Should Do on Your Own\n------------------------------\nAssignments turned in *without* these things will not receive any points.\n\n1. Above each line with a mathematical operation, use the `#` symbol to write a comment to yourself explaining what the line does.\n2. Look up Python's `round()` function and use it to round the percentages to two decimal places.\n3. Python has a number of ways to format output strings. There is a mixture of all of them in the above code. Choose one you like best and modify all the string formatting to use that one.\n\t- f-strings\n\t\t- `f\"Hello I am {2021 - 1984} years old.\"`\n\t\t- Result: `\"Hello I am 37 years old.\"`\n\t\t- Injects the Python code directly into the string.\n\t\t- Good because it's easy to see the exact resulting string without much clutter.\n\t- \"dot format\"\n\t\t- `\"{}-{}-{} {}:{} {}\".format(2021, 9, 8, 2, 45, \"pm\")`\n\t\t- Result: `\"2021-9-8 2:45 pm\"`\n\t\t- Injects values based on the position of the `{}`.\n\t\t- Good to keep the template text free from clutter especially when you have a lot of values to insert.\n\t- Concatenation\n\t\t- `\"Hello \" + \"I'm \" + \"your \" + \"teacher\"`\n\t\t- Result: `\"Hello I'm your teacher\"`\n\t\t- Can be difficult to keep track of all the `\"` and `+` symbols which could cause errors.\n\n\n\nFrequently-Asked Questions\n--------------------------\n- How does modulus (`%`) work?\n\t- Another way to say it is, \"X divided by Y with a remainder of J.\" As in, \"100 divided by 16 with a remainder of 4.\" The result of `%` is the J part, or the remainder part.\n- What is the order of operations?\n\t- In the United States we use an acronym called PEMDAS which stands for Parentheses Exponents Multiplication Division Addition Subtraction. That's the order Java follows as well.\n\n---\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "Variables",
        "number": 9,
        "name": "Variables and Names",
        "points": "7",
        "markdown": "# Variables and Names\n\nEvery serious computer program will deal with an awful lot of data and we need somewhere to store all that information. The computer will store your important data inside variables. Think of them as boxes (or containers) with a label on them (a name).\n\nBecause code can get quite long and complex, it is up to us to write code that not only works, but, code that is readable and understandable. We can help make our code readable by chosing descriptive variable names.\n\nHave a look at the code below. See if you can guess what the output might be. To do this, I would start at the `print` functions and look up the data stored in the variables. You can have a look at the \"What you should see\" section to check if you guessed properly.\n\nType out the code below and get it to run. **Do not copy and paste**.\n\nName the file: `variables_and_names.py`\n\n```python\nteam = \"Toronto Blue Jays\"\ncurrent_date = \"July 18, 2021\"\nplayer = \"Vladimir Guerrero Jr.\"\nhome_runs_to_date = 31\ngames_played = 88\ntotal_season_games = 162\nhome_run_record = 73\n\ngames_remaining = total_season_games - games_played\nhome_runs_per_game = home_runs_to_date / games_played\nprojected_home_runs = home_runs_per_game * total_season_games\ncan_break_record = projected_home_runs > home_run_record\n\nprint(f\"{player} of the {team}\")\nprint(f\"currently has {home_runs_to_date} home runs as of {current_date}.\")\nprint(f\"The current MLB record for most home runs in a season is {home_run_record}.\")\nprint(f\"With {games_remaining} games remaining and an average of {home_runs_per_game} home runs per game,\")\nprint(f\"it is {can_break_record} that he is on pace to break the record.\")\nprint(f\"{player} is projected to hit {projected_home_runs} home runs this season.\")\n\n```\n\nWhat You Should See\n-------------------\n```\nVladimir Guerrero Jr. of the Toronto Blue Jays\ncurrently has 31 home runs as of July 18, 2021.\nThe current MLB record for most home runs in a season is 73.\nWith 74 games remaining and an average of 0.3522727272727273 home runs per game,\nit is False that he is on pace to break the record.\nVladimir Guerrero Jr. is projected to hit 57.06818181818182 home runs this season.\n```\n\nWhat You Should Do on Your Own\n------------------------------\nAssignments turned in *without* these things will not receive any points.\n\n1. Place a comment above each variable assignment explaining what is being calculated and what is being stored in the variable.\n2. My code has two empty lines in it. Explain why I might have done this and explain how I chose to group specific lines of code.\n3. Use the `round()` function to tidy up the *printing* of the values (not the values being stored in the variables).\n4. Without knowing any of the values stored in the variables, how do you know the line `games_remaining = total_season_games - games_played` must be correct?\n\n---\n\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "Variables",
        "number": 10,
        "name": "More Variables and Printing",
        "points": "7",
        "markdown": "# More Variables and Printing\n\nIn the last exercise we used f-strings to inject the variable values into the strings we wanted to print out. Here, we will make use of Python's other ways of achieving this using *[string interpolation](https://en.wikipedia.org/wiki/String_interpolation)* as well as [concatenation](https://en.wikipedia.org/wiki/Concatenation).\n\nName your file: `more_variables.py`\n\n```\nstore = \"No Frills\"\nitem = \"Apples\"\nprice = 0.5\nquantity = 7\nsubtotal = price * quantity\ntax = subtotal * 0.05\ntotal = tax + subtotal\n\nprint(f\"At {store} I bought some {item}.\")\nprint(\"They sold for $\" + str(price) + \" each.\")\nprint(\"I wanted to purchase {} of them.\".format(quantity))\nprint(\"The total price, with tax included, was ${total}.\")\n```\n\nWhat You Should See\n-------------------\n```\nAt No Frills I bought some Apples.\nThey sold for $0.5 each.\nI wanted to purchase 7 of them.\nThe total price, with tax included, was ${total}.\n```\n\nWhat You Should Do on Your Own\n------------------------------\nAssignments turned in *without* these things will not receive any points.\n\n1. You will notice that the last line of output doesn't actually inject the `total` value into the string. What is missing in that line that is present in the first `print` line?\n2. Above each `print` function call, write a comment telling me which formatting approach was used.\n    - f-string\n    - \"dot format\"\n    - concatenation\n3. Before the last line of output, include some output message(s) describing the `subtotal` and the `tax` amounts.\n4. Change some of the variable values and observe how they alter the running of the program.\n\n---\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)\n\n"
    },
    {
        "section": "Variables",
        "number": 11,
        "name": "Using Variables",
        "points": "9",
        "markdown": "# Using Variables\n\nWrite a program that creates three variables: an `int`,\na `float`, and a `str` (string).\n\nName the file: `using_variables.py`\n\nPut the value `113` into the first variable, the\nvalue `2.71828` into the second, and the value `\"Computer Science\"` into the third. It does not\nmatter what you call the variables... *this time*.\n\nThen, display the values of these three variables on the screen (one per line) as per the example output:\n\n```\nThis is room #113 \ne is close to 2.71828 \nI am learning a bit about Computer Science \n```\n\nYour program *SHOULD NOT* look like this:\n```\nprint(\"This is room # 113\")\nprint(\"e is close to 2.71828\")\nprint(\"I am learning a bit about Computer Science\")\n```\n\nYou *must* use three variables and *inject* them into the output string using f-strings, \"dot format\" or string concatenation. Your program will probably have *six* lines of code.\n\n---\n\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\n\n\n\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "Variables",
        "number": 12,
        "name": "Still Using Variables",
        "points": "10",
        "markdown": "# Still Using Variables\n\nWrite a program that stores your name and year of graduation\ninto variables, and displays their values on the screen.\n\nName the file: `still_variables.py`\n\nMake sure that you use two variables, and that the variable that holds your name is the best *data type* for such a variable, and that the variable that holds the year is the best *data type* for *that* variable.\n\nAlso make sure that your variable names are good: the name of a variable should always relate to its contents.\n\n```\nMy name is Juan Valdez and I'll graduate in 2022.\n```\n\nPlease ensure that the values `\"Juan Valdez\"` and `2022` have been stored in variables before printing.\n\n\nYou're *doing it wrong* if your program looks like this:\n\n```\nprint(\"My name is Juan Valdez and I'll graduate in 2022\")\n```\n\nYou need to be doing string interpolation with the variables or using string concatenation.\n\n---\n\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\n\n\n\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "Variables",
        "number": 13,
        "name": "Your Schedule",
        "points": "15",
        "markdown": "# Your Schedule\n\nCreate a file called:\n\n`your_schedule.py`\n\nUse several variables to store the names of your classes and their teachers. Then, display a nice little table displaying your schedule. Just FYI, my column of courses has a width of `26` characters, and the teacher column has a width of `15`. The first and last lines are a plus sign, fifty dashes (a.k.a. minus signs) and another plus sign.\n\n**Your table doesn't need to look exactly like this, or even line up**. I used a total of sixteen variables (`course1`, `course2`, ... `course8`, `teacher1`, `teacher2`, etc.). You should do the same.\n\nHere is some f-string code that could help you line up your strings:\n```python\n# Python shell\n>>> name = \"Mr. Gallo\"\n>>> f\"{name:>20}\"\n'           Mr. Gallo'\n>>> f\"{name:<20}\"\n'Mr. Gallo           '\n```\n\nHere is something similar for `.format()`:\n```python\n# Python shell\n>>> name = \"Mr. Gallo\"\n>>> \"{:>20}\".format(name)\n'           Mr. Gallo'\n>>> \"{:<20}\".format(name)\n'Mr. Gallo           '\n```\n\nThe `>` and `<` symbols in this instance point to where the the text will be aligned. The `20` means the total space taken up will be `20` characters. Python will automatically calculate how many spaces to put based on the size of the string you are injecting.\n\nIf things are not lining up perfectly, just skip it. Lining up text is one of the least important things to spend your time on right now.\n\n```\n+------------------------------------------------------------+\n| 1 |                          English III |       Ms. Lapan |\n| 2 |                          Precalculus |     Mrs. Gideon |\n| 3 |                         Music Theory |       Mr. Davis |\n| 4 |                        Biotechnology |      Ms. Palmer |\n| 5 |           Principles of Technology I |      Ms. Garcia |\n| 6 |                             Latin II |    Mrs. Barnett |\n| 7 |                        AP US History | Ms. Johannessen |\n| 8 | Business Computer Infomation Systems |       Mr. James |\n+------------------------------------------------------------+\n```\n---\n\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "Keyboard Input",
        "number": 14,
        "name": "User Input",
        "points": "10",
        "markdown": "# User Input\n\n### IPO Model\nNearly every software application follows the **Input, Processing, Output** (IPO) Model. So far our programs have only covered **processing** (variable assignment, calculations, the *creation* of strings) and **output** (printing of strings to the terminal). From now on we will be writing programs that incorporate user **input** as well.\n\nIn Python this is accomplished using the `input()` function. When you run the program, it will actually pause and wait for you to type something in.\n\nManually write out the code below and run it. Name the file:\n\n`user_input.py`\n\n```python\nprint(\"Enter the following information about an item you wish to purchase..\")\nprint()\n\nprint(\"The name of the item:\")\nname = input()\n\nprice = float(input(\"The price: $\"))\n\nprint(\"How many do you want?\")\nquantity = int(input())\n\nsubtotal = price * quantity\ntax = subtotal * 0.13\ntotal = subtotal + tax\n\nprint()\nprint(f\"You choose to buy {quantity} {name}.\")\nprint(f\"That will come out to ${total}\")\n```\n\nWhat You Should See\n-------------------\n```\nEnter the following information about an item you wish to purchase..\n\nThe name of the item:\nApples\nThe price: $0.50\nHow many do you want?\n5\n\nYou choose to buy 5 Apples.\nThat will come out to $2.825\n```\n\nWhat You Should Do on Your Own\n------------------------------\n\n\nAssignments turned in *without* these things will not receive\nany points.\n\n\n1. What is different about how we took user input concerning the `price` as compared to how input was taken for the item `name`? There are two differences.\n2. Because it looks better, make your user input for `name` and `quantity` also appear on the same line (like `price`).\n3. What is a prompt? Why does switching the order as shown below cause a [usability](https://www.interaction-design.org/literature/topics/usability) issue?\n\t```python\n\tname = input()\n\tprint(\"Enter the name of the item:\")\n\t```\n4. Explain the use of the `int()` and `float()` functions. Why are they used? What happens if you remove them? i.e., `price = input(\"The price: $\")`\n---\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n"
    },
    {
        "section": "Keyboard Input",
        "number": 15,
        "name": "The Forgetful Machine",
        "points": "12",
        "markdown": "# The Forgetful Machine\n\nAsk the user for two words and two numbers, and let the\nperson at the keyboard type in some values, but don't bother\nstoring their responses into any variables.\n\nAgain, there is no need to create *any* variables. Just use the `input` and `print` functions.\n\nName the file:\n\n`forgetful_machine.py`\n\n```\nGive me a word!\nlorry! \nGive me a second word!\ndeoxyribonucleic? \n \nGreat, now your favorite number?\n42 \nAnd your second-favorite number...\n1 \n \nWhew!  Wasn't that fun?\n```\n\n---\n\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "Keyboard Input",
        "number": 16,
        "name": "Name, Age, and Salary",
        "points": "15",
        "markdown": "# Name, Age, and Salary\n\nAsk the user for their name. Then display their name to prove\nthat you can recall it. Ask them for their age. Then display that.\nFinally, ask them for how much they make and display that. You should use the most appropriate data type for each variable.\n\nName the file:\n\n`name_age_salary.py`\n\n```\nHello.  What is your name?\nDennis \n \nHi, Dennis!  How old are you?\n37 \n \nSo you're 37, eh?  That's not old at all!\nHow much do you make, Dennis?\n8.50 \n \n8.5!  I hope that's per hour and not per year! LOL!\n```\n\n```\nHello.  What is your name?\nCatsup \n \nHi, Catsup!  How old are you?\n12 \n \nSo you're 12, eh?  That's not old at all!\nHow much do you make, Catsup?\n99.9 \n \n99.9!  I hope that's per hour and not per year! LOL!\n\n```\n\n---\n\n\n\u00c2\u00a92013 Graham Mitchell\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n"
    },
    {
        "section": "Keyboard Input",
        "number": 17,
        "name": "More User Input of Data",
        "points": "16",
        "markdown": "# More User Input of Data\n\nAsk the user for several pieces of information, and display them\non the screen afterward as a summary.\n\n* first name\n* last name\n* grade\n* student id number\n* login name\n* average (0.0 to 100.0)\n\nYou must use the most appropriate type for each variable and not just strings for everything.\n\nThe spacing of the output text isn't terribly important, but please do get all user input on the same line as the prompt.\n\nName the file:\n\n`more_user_input.py`\n\n```\nPlease enter the following information so I can sell it for a profit!\n\nFirst name: Helena\nLast name: Bonham-Carter\nGrade (9-12): 12\nStudent ID: 453916\nLogin: bonham_453916\nAverage: 75.0\n\nYour information:\n\tLogin:     bonham_453916 \n\tID:        453916 \n\tName:      Bonham-Carter, Helena \n\tAverage:   75.0 %\n\tGrade:     12 \n\n```\n\n---\n\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "Keyboard Input",
        "number": 18,
        "name": "Age in Five Years",
        "points": "18",
        "markdown": "# Age in Five Years\n\nAsk the user for their name. Then display their name to prove that you can recall it. Ask them for their age. Then display what their age would be five years from now. Then display what their age would be five years ago.\n\nName the file:\n\n`age_in_five_years.py`\n\n```\nHello.  What is your name? Percy Bysshe Shelley\n\nHi, Percy Bysshe Shelley!  How old are you? 34\n\nDid you know that in five years you will be 39 years old?\nAnd five years ago you were 29! Imagine that!\n```\n\n```\nHello.  What is your name? Gramps\n\nHi, Gramps!  How old are you? 87\n\nDid you know that in five years you will be 92 years old?\nAnd five years ago you were 82! Imagine that!\n```\n\n---\n\n\n2013 Graham Mitchell\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n"
    },
    {
        "section": "Keyboard Input",
        "number": 19,
        "name": "A Silly Calculator",
        "points": "20",
        "markdown": "# A Silly Calculator\n\nMake a simple numeric calculator. It should prompt the user for three numbers. Then add the numbers together and divide by `2`. Display the result. Your program must support numbers with decimals and not just integers.\n\nName the file:\n\n`silly_calculator.py`\n\n```\nWhat is your first number? 1.1\nWhat is your second number? 2.2\nWhat is your third number? 5.5\n\n( 1.1 + 2.2 + 5.5 ) / 2 is... 4.4\n```\n\n---\n\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "Keyboard Input",
        "number": 20,
        "name": "BMI Calculator",
        "points": "15-28",
        "markdown": "# BMI Calculator\n\nPlease note that BMI \"is not a true diagnostic of body fatness or of an individual\u00e2\u20ac\u2122s overall health\". It has severe flaws. See the article *[Is BMI an Accurate Way to Measure Body Fat?](https://www.scientificamerican.com/article/is-bmi-an-accurate-way-to-measure-body-fat/)*.\n\nThe body mass index (BMI) is commonly used by health and nutrition professionals to estimate human body fat in populations.\n\nIt is computed by taking the individual's weight (mass) in kilograms and dividing it by the square of their height in meters.\n\nName the file:\n\n`bmi_calculator.py`\n\nSample Output\n-------------\n```\nHeight in m: 1.75\nWeight in kg: 73\n\nThe BMI is 23.83673\n```\n\nBonus #1 - Imperial Measurements\n--------------------------------\nFor `+10` bonus points, input their weight and height using pounds and inches, and convert to kilograms and meters to figure the BMI.\n\n```\nHeight in inches: 69\nWeight in pounds: 160\n\nThe BMI is 23.625289\n\n```\n\nFor an extra +3 bonus points (+13 total), input their height in feet and inches.\n\n```\nHeight (feet only): 5\nHeight (inches): 9\nWeight in pounds: 160\n\nThe BMI is 23.625289\n\n```\n\n---\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "If Statements",
        "number": 21,
        "name": "What If",
        "points": "15",
        "markdown": "# If Intro\n\nHere is the next Java program you'll enter, which introduces you to the if statement. Type this in, make it run\nexactly right and then we'll see if your practice has paid off.\n\nName your file:\n\n`if_intro.py`\n\n```\nrobot_location = 30\nball_location = 35\ngoal_location = 20\nhave_ball = False\n\nif robot_location < ball_location:\n    print(\"Almost at the ball\")\n\nif robot_location > goal_location:\n    print(\"You are beyond the goal.\")\n\nif robot_location == goal_location:\n    print(\"The robot is at the goal.\")\n\nrobot_location += 5\n\nif robot_location == goal_location:\n    print(\"At the goal.\")\n\nif robot_location == ball_location:\n    print(\"At the ball\")\n    print(\"Picking up the ball.\")\n    have_ball = True\n    print(\"Now make your way to the goal.\")\n\nrobot_location -= 15\n\nif robot_location < goal_location:\n    print(\"You went too far.\")\n\nif robot_location == goal_location and have_ball is True:\n    print(\"You scored a goal!\")\n    have_ball = False\n```\n\nWhat You Should See\n-------------------\n```\nAlmost at the ball\nYou are beyond the goal.\nMoing forward 5\nAt the ball\nPicking up the ball.\nNow make your way to the goal.\nMoing back 15\nYou reached the goal and scored!\n```\n\nWhat You Should Do on Your Own\n------------------------------\nAssignments turned in *without* these things will receive half credit or less.\n\nIn this section, you're going to try to guess what you think the if statement is and what it does.\n\n1. What do you think the if does to the code under it? Put your answer in a comment in the code.\n2. What is the purpose indenting in the if statement? How can we tell what code is enclosed in an if branch and what code is not? Answer in a comment.\n3. Change the initial locations of the objects and get the program to output the same thing.\n4. What do the operators `+=` and `-=` do?\n\n---\n\n\u00c2\u00a92021 Daniel Gallo\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "If Statements",
        "number": 22,
        "name": "How Old Are You?",
        "points": "25",
        "markdown": "# How Old Are You?\n\nMake a program which displays a different message depending on the age given. Here are the possible responses:\n\n\n* age is less than `16`, say `\"You can't drive.\"`\n* age is less than `18`, say `\"You can't vote.\"`\n* age is less than `21`, say `\"You can't rent a car.\"`\n* age is `21` or over, say `\"You can do anything that's legal.\"`\n\nHere's a sample run. Notice that a person who is under `16` will\ndisplay *three* messages, one for being under `16`, one for also\nbeing under `18`, and one for also being under `25`.\n\nName the file:\n\n`how_old.py`\n\n```\nHey, what's your name? Billy Corgan\nOk, Billy Corgan, how old are you? 17\n\nYou can't vote, Billy Corgan.\nYou can't rent a car, Billy Corgan.\n```\n\nWhat You Should Do on Your Own\n------------------------------\n1. Come up with a test plan that takes into account all possible outcomes of this program. Think of the IPO model. What inputs will result in what output? For example:\n    \n    |Input|Output|\n    |-----|------|\n    | `age = 17` | Can't vote, can't rent a car |\n    \n---\n\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "If Statements",
        "number": 23,
        "name": "If, Elif, Else",
        "points": "20",
        "markdown": "# If, Elif, Else\n\nType this one in and make it work, too.\n\nName your file:\n\n`if_elif_else.py`\n\n```python\nteam_a_points = 25\nteam_a_wins = 15\n\nteam_b_points = 20\nteam_b_wins = 16\n\nif team_a_points > team_b_points:\n    print(\"Team A wins!\")\n    team_a_wins += 1\nelif team_b_points > team_a_points:\n    print(\"Team B wins!\")\n    team_b_wins += 1\nelse:\n    print(\"Tie.\")\n\nif team_a_wins > team_b_wins:\n    print(\"Team A has more wins than Team B.\")\nelif team_b_wins > team_a_wins:\n    print(\"Team B has more wins than Team A.\")\nelse:\n    print(\"Both Teams A and B have the same number of wins.\")\n\n```\n\nWhat You Should See\n-------------------\n```\nTeam A wins!\nBoth Teams A and B have the same number of wins.\n```\n\nWhat You Should Do on Your Own\n------------------------------\nAssignments turned in *without* these things will receive half credit or less.\n\n1. Why do you suppose the output says `\"Both Teams A and B have the same number of wins.\"` when `team_a_wins` is initialized as only `15` and `team_b_wins` is initialized as `16`? It seems Team B has more wins. What is going on?\n2. What do you think `elif` and `else` are doing? Answer in a comment.\n3. Pick one of the `elif` statements and change it to `if` instead. What difference does that make? Why? Answer in a comment.\n\n\n---\n\n\u00c2\u00a92021 Daniel Gallo\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "If Statements",
        "number": 24,
        "name": "Weekday Name",
        "points": "15",
        "markdown": "# Weekday Name\n\nI have provided a function that is supposed to return the name of a day of the week given the day number.\n\n## Files Needed\n```eval_rst\n* :download:`weekday_name.py <examples/weekday_name.py>`\n```\n\nUse `if`, `elif` and `else` to complete it according to the following table:\n\n| Number | Weekday Name |\n| - | - |\n|1| Monday |\n|2| Tuesday |\n|3| Wednesday |\n|4| Thursday |\n|5| Fiday |\n|6| Saturday |\n|7| Sunday |\n|0| Sunday |\n|anything else| error\n\nSave your solution as:\n\n`weekday_name.py`\n\nWhat You Should See\n-------------------\n\n```\nWeekday 1: Monday\nWeekday 2: Tuesday\nWeekday 3: Wednesday\nWeekday 4: Thursday\nWeekday 5: Friday\nWeekday 6: Saturday\nWeekday 7: Sunday\nWeekday 0: Sunday\n\nWeekday 43: error\nWeekday 17: error\nWeekday -1: error\n\nToday is a Wednesday!\n```\n---\n\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "If Statements",
        "number": 25,
        "name": "How Old Are You, Specifically?",
        "points": "20",
        "markdown": "# How Old Are You, Specifically?\n\nUsing `if` statements, `elif`,\nand `else` statements, make a program which displays\na different message depending on the age given.\n\n\n| age | message |\n| - | - |\n| less than `16` | `\"You can't drive.\"` | \n| `16` to `17` | `\"You can drive but not vote.\"` | \n| `18` to `20` | `\"You can vote but not rent a car.\"` | \n| `21` or older | `\"You can do pretty much anything.\"` |\n\n\nNote that unlike the [original \"How\nOld Are You\" assignment](how-old-are-you.md), this program must only display *exactly one* message for a given age and not multiple messages.\n\nName your file:\n\n`how_old_specifically.py`\n\n```\nHey, what's your name? (Sorry, I keep forgetting): Billy Corgan\nOk, Billy Corgan, how old are you? 17\n\nYou can drive but you can't vote, Billy Corgan.\n```\n\n```\nHey, what's your name? (Sorry, I keep forgetting): Billy Corgan\nOk, Billy Corgan, how old are you? 14\n\nYou can't drive, Billy Corgan.\n```\n\nYou can make up your own messages if you want, but you must have\nat least four messages, and you must use `else if`\nstatements to make sure only one of the messages is printed for any\ngiven age.\n\n\n\n---\n\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "If Statements",
        "number": 26,
        "name": "Space Boxing",
        "points": "30",
        "markdown": "# Space Boxing\n\nJulio Cesar Chavez Mark VII is an interplanetary space boxer,\nwho currently holds the championship belts for various weight\ncategories on many different planets within our solar system.\nHowever, it is often difficult for him to recall what his \"target weight\" needs to be on earth in order to make the weight class on other planets. Write a program to help him keep track of this.\n\nName your file:\n\n`space_boxing.py`\n\nIt should ask him what his earth weight is, and to enter a number for the planet he wants to fight on. It should then compute his weight on the destination planet based on the table below:\n\n| # | Planet | Relative gravity |\n| - | - | - |\n| 1 | Venus | `0.78` |\n| 2 | Mars | `0.39` |\n| 3 | Jupiter | `2.65` |\n| 4 | Saturn | `1.17` |\n| 5 | Uranus | `1.05` |\n| 6 | Neptune | `1.23` |\n\nSo, for example, if Julio weighs `128` lbs. on earth, then he would weigh just under `50` lbs. on Mars, since Mars' gravity is `0.39` times earth's gravity. (`128 * 0.39` is `49.92`)\n\n```\nPlease enter your current earth weight: 128\n\nI have information for the following planets:\n   1. Venus   2. Mars    3. Jupiter\n   4. Saturn  5. Uranus  6. Neptune\n\nWhich planet are you visiting? 2\n\nYour weight would be 49.92 pounds on that planet.\n\n```\n---\n\n\n\u00c2\u00a92021 Daniel Gallo\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "If Statements",
        "number": 27,
        "name": "A Little Quiz",
        "points": "40",
        "markdown": "# A Little Quiz\n\nWrite an interactive quiz. It should ask the user three multiple-choice or true/false questions about something. It must keep track of how many they get wrong, and print out a \"score\" at the end.\n\nName your file:\n\n`little_quiz.py`\n\n```\nAre you ready for a quiz?  N\nOkay, here it comes!\n\nQ1) What is the capital of Alaska?\n\t1) Melbourne\n\t2) Anchorage\n\t3) Juneau\n\n> 3\n\nThat's right!\n\nQ2) In Python, the way you get keyboard input is the keyobard_input function.\n\t1) true\n\t2) false\n\n> 1\n\nSorry, in Python, you would use the \"input\" function to get keyboard input.\n\nQ3) What is the result of 9 + 6 / 3?\n\t1) 5\n\t2) 11\n\t3) 15/3\n\n> 2\n\nThat's correct!\n\n\nOverall, you got 2 out of 3 correct.\nThanks for playing!\n```\n\n---\n\n\u00c2\u00a92021 Daniel Gallo\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "If Statements",
        "number": 28,
        "name": "Modulus Animation",
        "points": "20",
        "markdown": "# Modulus Animation\n\nIn this program, you'll use a loop to draw a simple ASCII-based\nanimation on the screen, and you will use modulus (`%`) to\ndetermine which frame of the animation to show. (You will learn how to\ncreate your own loops later.)\n\n## Files Needed\n\n```eval_rst\n* :download:`modulus_animation.py <examples/modulus_animation.py>` - modify this. It is the base-template.\n``` \n ```eval_rst\n* :download:`modulus_animation_worm.py <examples/modulus_animation_worm.py>` - first example\n``` \n ```eval_rst\n* :download:`modulus_animation_symbols.py <examples/modulus_animation_symbols.py>` - second example\n``` \n\n\nName your file:\n\n`modulus_animation.py`\n\n\nWhat You Should See\n-------------------\nIf you download and run `modulus_animation_worm.py` it will look roughly like this, but bouncing back and forth.\n\n```\n   ********\n```\n\nWhat You Should Do on Your Own\n------------------------------\nAssignments turned in *without* these things will receive\nno credit.\n\n1. Add several `if` and `elif` statements in\n `modulus_animation.py` so that it draws a little animation of your choosing.\n2. You must have a minimum of eight (8) different frames of animation, and it must loop smoothly.\n\n---\n\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "GUIs",
        "number": 29,
        "name": "Using Tkinter for Input",
        "points": "20",
        "markdown": "# Using Tkinter for Input\nType in the following code. Run it, and see what it does.\n\nName the file: `tkinter_intro.py`\n\n![screenshot of code prevents copy-and-paste](images/gui-1.jpg)\n\nAs you can see, there is significant effort required to get a **Graphical User Interface** (GUI) set up. Most of the code here is creating and positioning the different widgets.\n\nWe will occasionally scratch the surface of building GUI applications, but it is good to keep to the basics as much as possible during the learning process.\n\nWhat it should look like\n------------------------\n![screenshot of code prevents copy-and-paste](images/gui-1-result.jpg)\n\n\n---\n\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\n\n\n\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "GUIs",
        "number": 30,
        "name": "Favourite Colour",
        "points": "30",
        "markdown": "# Favourite Colour\n\nTake the code from the [previous exercise](using-tkinter-for-input.md) and add the ability to collect the user's favourite colour.\n\nYou will need to:\n- add a new Label\n- add a new Entry\n- call `.grid()` on the label and entry.\n    - Be sure to adjust the row for the submit button (it needs to be moved down to the next row)\n- `print` output in the `handle_submit` function.\n\nName the file: `favourite_colour.py`\n\n---\n\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n"
    },
    {
        "section": "GUIs",
        "number": 31,
        "name": "Clear Text",
        "points": "30",
        "markdown": "# Clear text\nTake your solution from the [previous exercise](favourite-colour.md) and add a button that will clear the text of all Entry widgets (name, age, and favourite colour).\n\nYou will need to:\n- add the new \"Clear\" Button beside or below the \"Submit\" button.\n    - Initialize (create) it, then call `.grid()` on it like the other widgets.\n- add a `command` for the clear button `command=handle_clear` \n- Create the `handle_clear` function that will do the clearing.\n- In the `handle_clear` function, you can call the `delete` method on each entry widget you want to clear.\n    - E.g., `entry_name.delete(0, END)`\n\nName the file: `clear_text.py`\n\n---\n\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n"
    },
    {
        "section": "If Statements II",
        "number": 32,
        "name": "Twenty Questions... well, actually just Two",
        "points": "35",
        "markdown": "# Twenty Questions... well, actually just Two\n\n\nMake a program which plays a simple game of ~~`20`~~ `2` Questions.\n\nThe first question should be `\"animal, vegetable, or mineral?\"` Then, the second question should be `\"is it bigger than a breadbox?\"` Then, display one of six possible responses, depending on their answers. You can choose what answers to give for each of the six possibilities.\n\nHere's a suggestion:\n\n|  | animal | vegetable | mineral |\n| - | - | - | - |\n| **smaller than a breadbox** | squirrel | carrot | paper clip\n| **bigger than a breadbox** | moose | watermelon | Camaro\n\n\nYou will use *nested* **`if`** statements to do this.\n\nName your file: `two_questions.py`\n\n```\nTWO QUESTIONS!\nThink of an object, and I'll try to guess it.\n\nQuestion 1) Is it animal, vegetable, or mineral?\n> animal\n\nQuestion 2) Is it bigger than a breadbox?\n> no\n\nMy guess is that you are thinking of a mouse.\n```\n\n```\nTWO QUESTIONS!\nThink of an object, and I'll try to guess it.\n\nQuestion 1) Is it animal, vegetable, or mineral?\n> mineral\n\nQuestion 2) Is it bigger than a breadbox?\n> yes\n\nMy guess is that you are thinking of a Camaro.\n```\n\n```\nTWO QUESTIONS!\nThink of an object, and I'll try to guess it.\n\nQuestion 1) Is it animal, vegetable, or mineral?\n> vegetable\n\nQuestion 2) Is it bigger than a breadbox?\n> yes\n\nYou're thinking of a watermelon!\n\n```\n---\n\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "If Statements II",
        "number": 33,
        "name": "Choose Your Own Short Adventure!",
        "points": "60",
        "markdown": "# Choose Your Own Adventure!\n\nMake a short \"Choose Your Own Adventure\" game. The starting room\nshould give the user two choices. Then the second room they \nto should give them two more choices. Finally the third room should give them two choices.\n\nThis means your game will have eight possible \"endings\". Your game will also have a total of fifteen rooms:\n\nName your file: `adventure.py`\n\n```\n        _ R1 _\n       /      \\\n    R2          R3\n   /  \\        /  \\\n R4    R5    R6    R7\n /\\    /\\    /\\    /\\\nE1 E2 E3 E4 E5 E6 E7 E8\n\n```\n\nYou must use *nested* `if` statements to do this.\n\n```\nWELCOME TO MITCHELL'S TINY ADVENTURE!\n\nYou are in a creepy house!  Would you like to go \"upstairs\" or into the\n\"kitchen\"?\n> kitchen\n\nThere is a long countertop with dirty dishes everywhere.  Off to one side\nthere is, as you'd expect, a refrigerator. You may open the \"refrigerator\"\nor look in a \"cabinet\".\n> refrigerator\n\nInside the refrigerator you see food and stuff.  It looks pretty nasty.\nWould you like to eat some of the food? (\"yes\" or \"no\")\n> no\n\nYou die of starvation... eventually.\n\n```\n\n```\nWELCOME TO MITCHELL'S TINY ADVENTURE!\n\nYou are in a creepy house!  Would you like to go \"upstairs\" or into the\n\"kitchen\"?\n> upstairs\n\nUpstairs you see a hallway.  At the end of the hallway is the master\n\"bedroom\".  There is also a \"bathroom\" off the hallway.  Where would you like\nto go?\n> bedroom\n\nYou are in a plush bedroom, with expensive-looking hardwood furniture.  The\nbed is unmade.  In the back of the room, the closet door is ajar.  Would you\nlike to open the door? (\"yes\" or \"no\")\n> no\n\nWell, then I guess you'll never know what was in there.  Thanks for playing,\nI'm tired of making nested if statements.\n\n```\n\n---\n\n\n\u00c2\u00a92013 [Graham Mitchell](https://programmingbydoing.com/)\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n"
    },
    {
        "section": "If Statements II",
        "number": 34,
        "name": "Age Messages 3",
        "points": "25",
        "markdown": "# Age Messages 3\n\nUsing `if` statements with compound conditions\n(like `and` and `or`), make a program that displays a single\nmessage depending on the age given.\n\n\n| age | message |\n| - | - |\n| less than `16` | `\"You can't drive.\"`|\n| `16` to `17` | `\"You can drive but not vote.\"`|\n| `18` to `24` | `\"You can vote but not rent a car.\"`|\n| `25` or older | `\"You can do pretty much anything.\"` |\n\n\n\nThis output of this assignment is identical to [the \"How\nOld Are You, Specifically\" assignment](how-old-are-you-specifically.md). However, this time you *must*\naccomplish it using `if` statements with compound conditions and **you *must not* use `elif` or `else`**.\n\nName your file: `034-age-compound-boolean.py`\n\n\n```\nYour name: Dukes\nYour age: 19\n\nYou can vote but you can't rent a car, Dukes.\n\n```\n\n\u00c2\u00a0\n\n\n\n```\nYour name: Dukes\nYour age: 12\n\nYou can't drive, Dukes.\n\n```\n\nYou can make up your own messages if you want, but you must have at least four messages, and you must use the `and` operator to make sure only one of the messages is printed for any given age.\n\n\n---\n\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "If Statements II",
        "number": 35,
        "name": "Two More Questions",
        "points": "35",
        "markdown": "# Two More Questions\n\nUsing `if` statements with compound conditions\n(like `and`), make a guessing game of two questions\nsimilar to the [Twenty Questions\nassignment](twenty-questions-well-actually-just-two.md).\n\n\nHowever, this time you *must* accomplish it using `if` statements with compound conditions and **you *must\nnot* use `elif` or `else` or nested `if`s**.\n\n\n* Question 1: Does it belong inside or outside or both?\n* Question 2: Is it alive?\n\nAgain, here are some sample responses, for the non-creative among\nyou.\n\n\n|  | inside | outside | both |\n| - | - | - | - |\n| **alive** | houseplant | bison | dog |\n| **not alive** | shower curtain | billboard | cell phone |\n\nName your file: `two_more_questions.py`\n\n```\nTWO MORE QUESTIONS, BABY!\n\nThink of something and I'll try to guess it!\n\nQuestion 1) Does it stay inside or outside or both? outside\nQuestion 2) Is it a living thing? yes\n\nThen what else could you be thinking of besides a python?!?\n\n```\n\n```\nTWO MORE QUESTIONS, BABY!\n\nThink of something and I'll try to guess it!\n\nQuestion 1) Does it stay inside or outside or both? both\nQuestion 2) Is it a living thing? no\n\nObviously the nonliving, inside/outside thing on your mind is a dead ant!\n\n```\n\n---\n\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "If Statements II",
        "number": 36,
        "name": "BMI Categories",
        "points": "35-45",
        "markdown": "# BMI Categories\n\nThe body mass index (BMI) is commonly used by health and nutrition professionals to estimate human body fat in populations. It is computed by taking the individual's weight (mass) in kilograms and dividing it by the square of their height in meters.\n\nStart with the [BMI Calculator](bmi-calculator.md) you\nwrote previously (`bmi_calculator.py`). Then use some `if`\nstatements to show the category for a given BMI.\n\n\n| BMI | category |\n| - | - |\n| less than `18.5` | underweight |\n| `18.5` to `24.9` | normal weight |\n| `25.0` to `29.9` | overweight |\n| `30.0` or more | obese |\n\nName the file: `bmi_categories.py`\n\n\n*Note*: The formula doesn't work well for athletes with a lot of muscle, or people who are extremely short or very tall (quite unreliable). If you are concerned about your BMI, check with your doctor.\n\n\nSample Output\n-------------\n```\nYour height in m: 1.75\nYour weight in kg: 73\n\nYour BMI is 23.83673\nBMI Category: normal weight\n\n```\n\nIt doesn't matter whether you input the values in metric (kilos and meters)\nor Imperial measurements (feet/inches and pounds).\n\n```\nYour height in inches: 69\nYour weight in pounds: 220\n\nYour BMI is 32.5\nBMI Category: obese\n\n```\n\nBonus #1 - More Categories\n--------------------------\n\nFor +10 bonus points, use more `if` statements\nto show the ALL the BMI categories.\n\n| BMI | category |\n| - | - |\n| less than 15.0 | very severely underweight |\n| 15.0 to 16.0 | severely underweight  |\n| 16.1 to 18.4 | underweight |\n| 18.5 to 24.9 | normal weight |\n| 25.0 to 29.9 | overweight |\n| 30.0 to 34.9 | moderately obese |\n| 35.0 to 39.9 | severely obese |\n| 40.0 and up | very severely (or \"morbidly\") obese |\n\n\n```\nYour height in inches: 70\nYour weight in pounds: 90\n\nYour BMI is 12.9\nBMI Category: very severely underweight\n\n```\n\n---\n\n\u00c2\u00a92021 Daniel Gallo\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "If Statements II",
        "number": 37,
        "name": "Gender Game",
        "points": "50",
        "markdown": "# Gender Game\n\nMake a program which displays an appropriate name for a\nperson, using a combination of nested `if`s and compound conditions. Ask the user for a gender, first name, last name and age.\n\n\nIf the person is female and `20` or over, ask if she is married. If so, display \"Mrs.\" in front of her name. If not, display \"Ms.\" in front of her name. If the female is under `20`, display her first and last name.\n\n\nIf the person is male and `20` or over, display \"Mr.\" in front of his name. Otherwise, display his first and last name.\n\n\nNote that asking a person if they are married should\n*only* be done if they are female and `20` or older, which\nmeans you will have a single `if` and `else` nested inside one of your `if` statements.\n\nName the file: `gender_game.py`\n\n\n```\nWhat is your gender (M or F): F\nFirst name: Kim\nLast name: Kardashian\nAge: 32 \n\nAre you married, Kim (y or n)? y\n\nThen I shall call you Mrs. Kardashian.\n\n```\n\n\n```\nWhat is your gender (M or F): F\nFirst name: Marisa\nLast name: Tomei\nAge: 48 \n\nAre you married, Marisa (y or n)? n\n\nThen I shall call you Ms. Tomei.\n\n```\n\nNotice that in the example below, we *never even ask the marriage question*, because she is under `20` and so her marital status doesn't change what we call her.\n\n\n```\nWhat is your gender (M or F): F\nFirst name: Chloe\nLast name: Moretz\nAge: 16 \n\nThen I shall call you Chloe Moretz.\n\n```\n\n```\nWhat is your gender (M or F): M\nFirst name: Daniel\nLast name: Radcliffe\nAge: 23  \n\nThen I shall call you Mr. Radcliffe.\n\n```\n\n```\nWhat is your gender (M or F): M\nFirst name: Zachary\nLast name: Gordon\nAge: 15 \n\nThen I shall call you Zachary Gordon.\n\n```\n\n---\n\n\n\u00c2\u00a92013 [Graham Mitchell](https://programmingbydoing.com/)\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n"
    },
    {
        "section": "If Statements II",
        "number": 38,
        "name": "Alpha Order",
        "points": "35",
        "markdown": "# Alpha Order\n\n\nWrite a program that compares several strings using the comparison operators `<` and `<`. You should display the strings and display the Boolean evaluation (`True` or `False`) that the comparison gives you.\n\n\nProduce:\n- 5 examples of two words where the first word comes before the second word in alphabetical order.\n- 5 examples of two words where the first word comes after the second word.\n\nYou may **not** just flip the strings around; you must have ten *different* examples.\n\nName your file: `alpha_order.py`\n\nHere's an example:\n\n```python\n# showing two different interpolation options.\n# choose one that works best for you.\nprint(f\"'axe' comes before 'dog': {'axe' < 'dog'}\")\nprint(\"'{}' comes before '{}': {}\".format(\"applebee's\", \"apple\", \"applebee's\" < \"apple\"))\n```\n\n\n```\n'axe' comes before 'dog': True\n'applebee's' comes before 'apple': False\n```\n\nWhat to think about\n-------------------\n1. Why does `\"Dog\"` come before `\"axe\"`?\n2. How can you fix this issue?\n\n---\n\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "If Statements II",
        "number": 39,
        "name": "Attendance",
        "points": "30",
        "markdown": "# Attendance\n\nMake a program that asks for the last name of the\nuser. Depending on their last name, make a statement about\nhow long they have to wait during roll call. You need to use\n`elif`'s to make sure only one statement\ngets printed.\n\nOnce you understand how comparing strings works using the comparison operators, this is a pretty straightforward assignment, much like [How Old Are You, specifically](how-old-are-you-specifically.md), except that it uses strings instead of `int`s.\n\n\n* name is `\"Carswell\"` or before: say `\"you don't have to wait long\"`\n* name is `\"Jones\"` or before: say `\"that's not bad\"`\n* name is `\"Smith\"` or before: say `\"looks like a bit of a wait\"`\n* name is `\"Young\"` or before: say `\"it's gonna be a while\"`\n* name is after `\"Young\"`: say `\"not going anywhere for a while?\"`\n\nName your file: `039_attendance.py\n\n```\nWhat's your last name? Stephanopolis\nIt's gonna be a while, \"Stephanopolis\".\n```\n---\n\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "If Statements II",
        "number": 40,
        "name": "The Worst Number-Guessing Game Ever",
        "points": "15",
        "markdown": "# The Worst Number-Guessing Game Ever\n\n\nWrite a program that plays an incredibly silly number-guessing game. The user will get one try to guess the secret number. Tell them if they got it right or wrong, and if they got it wrong, display what the secret number was.\n\nYou must store the secret number in a variable, and use that variable throughout. The secret number itself must **not** appear in the program at all, *except* in the one line where you store it into a variable.\n\n\nI know it will be the same number every time the game is played.\n\nName your file: `worst_guessing_game.py`\n\n```\nTEH WORST NUBMER GESSING GAME EVAR!!!!!!!1!\n\nI\"M THKING OF A NBR FROM 1-10.  TRY 2 GESS! 3\n\nW00T!  U SUX0R!!!  I PWN J00!!!  IT WAS 4!\n\n```\n\n```\nTEH WORST NUBMER GESSING GAME EVAR!!!!!!!1!\n\nI\"M THKING OF A NBR FROM 1-10.  TRY 2 GESS! 4\n\nLOL!!! U GOT IT!  I CANT BELEIVE U GESSED IT WAS 4!\n\n```\n\n```\nTEH WORST NUBMER GESSING GAME EVAR!!!!!!!1!\n\nI\"M THKING OF A NBR FROM 1-10.  TRY 2 GESS! 4\n\nLOL!!! U GOT IT!  I CANT BELEIVE U GESSED IT WAS 4!\n\n```\n\n```\nTEH WORST NUBMER GESSING GAME EVAR!!!!!!!1!\n\nI\"M THKING OF A NBR FROM 1-10.  TRY 2 GESS! 4\n\nLOL!!! U GOT IT!  I CANT BELEIVE U GESSED IT WAS 4!\n\n```\n\n\u00f0\u0178\u2122\u201e\u00f0\u0178\u00a4\u00a6\n\n---\n\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "Random Numbers",
        "number": 41,
        "name": "Randomness",
        "points": "15",
        "markdown": "# Randomness\n\n\nYou know what's cool? Having the computer randomly choose a number. This is the basis of pretty much every computer game ever.\n\n\nTo pick a random number, you first need to `import random`.\n\n\nThen, you can use the [random library](https://docs.python.org/3/library/random.html)'s functions. The most useful, in my opinion is `random.randrange()`.\n\n\n```python\nimport random\n\n\nx = random.randrange(10)        # 0-9\ny = random.randrange(5, 10)     # 5-9\nz = random.randrange(5, 10, 2)  # 5-9, counting by two\n\n# should be different every time you run the program\nprint(f\"{x = }\")\nprint(f\"{y = }\")\nprint(f\"{z = }\")\n```\n\nStarter code\n------------\nName your file: `randomness.py`\n\n```python\nimport random\n\n\nx = random.randrange(10)  # 0-9\nprint(f\"My random number is {x}.\")\n\nprint()\nprint(\"Here are some random numbers from 1 to 5...\")\nprint(random.randrange(1, 6), end=\", \")\nprint(random.randrange(1, 6), end=\", \")\nprint(random.randrange(1, 6), end=\", \")\nprint(random.randrange(1, 6), end=\", \")\nprint(random.randrange(1, 6), end=\", \")\nprint(random.randrange(1, 6), end=\", \")\nprint(random.randrange(1, 6))\n\nprint()\nprint(\"Here are some random numbers from 1 to 100...\")\nprint(random.randrange(1, 101), end=\", \")\nprint(random.randrange(1, 101), end=\", \")\nprint(random.randrange(1, 101), end=\", \")\nprint(random.randrange(1, 101), end=\", \")\nprint(random.randrange(1, 101), end=\", \")\nprint(random.randrange(1, 101), end=\", \")\nprint(random.randrange(1, 101), end=\", \")\nprint(random.randrange(1, 101), end=\", \")\nprint(random.randrange(1, 101), end=\", \")\nprint(random.randrange(1, 101), end=\", \")\nprint(random.randrange(1, 101))\n\nprint()\nprint(\"Will these next two random number be the same?\")\na = random.randrange(10)  # 0-9\nb = random.randrange(10)\n\nif a == b:\n    print(f\"Wow! Both numbers were {a}!\")\nelse:\n    print(\"The two random numbers were different. Not too surprising.\")\n```\n\nWhat You Should See\n-------------------\nYour random numbers will probably be different than these. Actually, that's kind of the point.\n\n```\nMy random number is 8.\n\nHere are some random numbers from 1 to 5...\n3, 5, 1, 5, 5, 3, 2\n\nHere are some random numbers from 1 to 100...\n33, 57, 29, 29, 66, 30, 77, 78, 67, 8, 59\n\nWill these next two random number be the same?\nThe two random numbers were different. Not too surprising.\n```\n\nWhat You Should Do on Your Own\n------------------------------\nAssignments turned in *without* these things will receive\nno credit.\n\n1. What happens if we change `random.randrange(1, 6)` to `random.randrange(1, 5)`? Make the change and run the program a few times to see the result. What seems to be the new range of numbers that pop up? \n2. After the `import` statement, use the `random.seed()` function and give it an integer like `random.seed(400)`. What do you notice? What happened to the random numbers?\n3. Change to random seed to something else and observe the behavior. What happens to the random numbers?\n4. There are a couple popular games I can think of that use this concept of a \"seed\". Why do you suppose they use it and what does it do in the game?\n\n---\n\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "Random Numbers",
        "number": 42,
        "name": "Magic 8-Ball",
        "points": "10",
        "markdown": "# Magic 8-Ball\n\n## Starter Code\nName your file: `magic_8ball.py`\n```python\nimport random\n\n\nchoice = random.randrange(1, 16)  # 1-15\nresponse = \"\"\n\nif choice == 1:\n    response = \"It is certain\"\nelif choice == 2:\n    response = \"It is decidedly so\"\nelif choice == 3:\n    response = \"Without a doubt\"\nelif choice == 4:\n    response = \"Yes - definitely\"\nelif choice == 5:\n    response = \"You may rely on it\"\nelif choice == 6:\n    response = \"As I see it, yes\"\nelif choice == 7:\n    response = \"Most likely\"\nelif choice == 8:\n    response = \"Outlook good\"\nelif choice == 9:\n    response = \"Signs point to yes\"\nelif choice == 10:\n    response = \"Yes\"\nelif choice == 11:\n    response = \"Reply hazy, try again\"\nelif choice == 12:\n    response = \"Ask again later\"\nelif choice == 13:\n    response = \"Better not tell you now\"\nelif choice == 14:\n    response = \"Cannot predict now\"\nelif choice == 15:\n    response = \"Concentrate and ask again\"\nelse:\n    response = \"8-BALL ERROR!\"\n\nprint(\"MAGIC 8-BALL SAYS: \" + response)\n\n```\n\nWhat You Should See\n-------------------\nYour answers will probably be different than these. Actually, that's kind of the point.\n```\nMAGIC 8-BALL SAYS: It is decidedly so\n\n```\n\n```\nMAGIC 8-BALL SAYS: Reply hazy, try again\n\n```\n\n```\nMAGIC 8-BALL SAYS: Signs point to yes\n\n```\n\nWhat You Should Do on Your Own\n------------------------------\nAssignments turned in *without* these things will receive\nno credit.\n\n1. The real Magic 8-Ball\u00e2\u201e\u00a2 contains `20` responses, not `15`. Change the code so that it picks a random\n number from `1-20`, and add the following five responses:\n\t* `\"Don't count on it\"`\n\t* `\"My reply is no\"`\n\t* `\"My sources say no\"`\n\t* `\"Outlook not so good\"`\n\t* `\"Very doubtful\"`\n---\n\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "Random Numbers",
        "number": 43,
        "name": "A Number-Guessing Game",
        "points": "20",
        "markdown": "# A Number-Guessing Game\n\nModify your [silly number-guessing game](the-worst-number-guessing-game-ever.md) to actually pick a random number from `1` to `10` and have the user try to guess that. Tell them if they get it right or wrong, and if they get it wrong, show them what the random number was.\n\nThey will still only get one try.\n\nName the file: `number_guessing_game.py`\n\n```\nI'm thinking of a number from 1 to 10.\nYour guess: 3\n\nSorry, but I was really thinking of 4.\n\n```\n\n```\nI'm thinking of a number from 1 to 10.\nYour guess: 4\n\nSorry, but I was really thinking of 7.\n\n```\n\n```\nI'm thinking of a number from 1 to 10.\nYour guess: 2\n\nThat's right!  My secret number was 2!\n\n```\n\n---\n\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "Random Numbers",
        "number": 44,
        "name": "Fortune Cookie",
        "points": "15-25",
        "markdown": "# Fortune Cookie\n\n\nWrite a program that simulates a random fortune from a fortune cookie. You must have at least six fortunes.\n\nFor bonus points, also add randomly-chosen lotto numbers to the\nfortune. In Texas, the lotto chooses 6 numbers, each from 1-54.\n\nName your file: `fortune_cookie.py`\n\n```\nFortune cookie says: \"You will find happiness with a new love.\"\n```\n\nBonus output:\n```\nFortune cookie says: \"Stick with your wife.\"\n    13 - 44 - 19 - 37 - 29 - 17\n\n```\n\n---\n\n\n\u00c2\u00a92013 [Graham Mitchell](https://programmingbydoing.com/)\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n"
    },
    {
        "section": "Random Numbers",
        "number": 45,
        "name": "Dice",
        "points": "25",
        "markdown": "# Dice\n\n\nWrite a program that simulates a dice roll by picking a random\nnumber from `1-6` and then picking a second random number from `1-6`. Add the two values together, and display the total.\n\nName the file: `dice.py`\n\n```\nHERE COMES THE DICE!\n\nRoll #1: 3\nRoll #2: 5\nThe total is 8!\n\n```\n\n```\nHERE COMES THE DICE!\n\nRoll #1: 4\nRoll #2: 2\nThe total is 6!\n\n```\n\n---\n\n\n\u00c2\u00a92013 [Graham Mitchell](https://programmingbydoing.com/)\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\n"
    },
    {
        "section": "Random Numbers",
        "number": 46,
        "name": "One Shot Hi-Lo",
        "points": "35",
        "markdown": "# One Shot Hi-Lo\n\n\nWrite a program that picks a random number from `1-100`. Give the user a chance to guess it. If they get it right, tell them so. If their guess is higher than the number, say `\"Too high.\"` If their guess is lower than the number, say `\"Too low.\"` Then quit. (They don't get any more guesses for now.)\n\nName the file: `one_shot_hi_lo.py`\n```\nI'm thinking of a number between 1-100.  Try to guess it.\n> 13\n\nSorry, you are too low.  I was thinking of 34.\n\n```\n\n```\nI'm thinking of a number between 1-100.  Try to guess it.\n> 79\n\nSorry, you are too high.  I was thinking of 51.\n\n```\n\n```\nI'm thinking of a number between 1-100.  Try to guess it.\n> 42\n\nYou guessed it!  What are the odds?!?\n\n```\n\n---\n\n\n\u00c2\u00a92013 [Graham Mitchell](https://programmingbydoing.com/)\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n"
    },
    {
        "section": "Random Numbers",
        "number": 47,
        "name": "Three-Card Monte",
        "points": "20",
        "markdown": "# Three Card Monte\n\nThis is the original \"ball and cups\" game where you try to find out which cup has the ball under it. You may play with three cups and a ball, three cards (two jacks and an ace), or three doors and a car. Basically, randomly select a cup to hide the \"ball\". Let the player guess which cup hides the ball. The player wins if they guess correctly.\n\nName the file: `three_card_monty.py`\n\n```\nYou slide up to Fast Eddie's card table and plop down your cash.\n\nHe glances at you out of the corner of his eye and starts shuffling.\n\nHe lays down three cards.\n\nWhich one is the ace?\n\n\t##  ##  ##\n\t##  ##  ##\n\t1   2   3\n\n> 2\n\nHa! Fast Eddie wins again! The ace was card number 3.\n\n\t##  ##  AA\n\t##  ##  AA\n\t1   2   3\n\n\n```\n\n(Note that this is basically just a number-guessing game with fancy graphics.)\n\n```\nYou slide up to Fast Eddie's card table and plop down your cash.\nHe glances at you out of the corner of his eye and starts shuffling.\n\nHe lays down three cards.\n\nWhich one is the ace?\n\n\t##  ##  ##\n\t##  ##  ##\n\t1   2   3\n\n> 2\n\nYou nailed it! Fast Eddie reluctantly hands over your winnings, scowling.\n\n\t##  AA  ##\n\t##  AA  ##\n\t1   2   3\n\n\n```\n\n---\n\n\u00c2\u00a92013 [Graham Mitchell](https://programmingbydoing.com/)\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n"
    },
    {
        "section": "While Loops",
        "number": 48,
        "name": "Enter Your PIN",
        "points": "15",
        "markdown": "# Enter Your PIN\n\n\nType in the following code, and get it to compile. This assignment will help you learn how\nto make a loop, so that you can repeat a section of code over and over again!\n\nName your file: `pin.py`\n\n```python\nPIN = \"12345\"\n\nprint(\"WELCOME TO THE BANK OF GALLO.\")\nentry = input(\"ENTER YOUR PIN: \")\n\nwhile entry != PIN:\n    print(\"\\nINCORRECT PIN. TRY AGAIN.\")\n    entry = input(\"ENTER YOUR PIN: \")\n\n\nprint(\"\\nPIN ACCEPTED. YOU NOW HAVE ACCESS TO YOUR ACCOUNT.\")\n\n```\n\nWhat You Should See\n-------------------\n\n```\nWELCOME TO THE BANK OF GALLO.\nENTER YOUR PIN: 90210\n\nINCORRECT PIN. TRY AGAIN.\nENTER YOUR PIN: 11111\n\nINCORRECT PIN. TRY AGAIN.\nENTER YOUR PIN: 12345\n\nPIN ACCEPTED. YOU NOW HAVE ACCESS TO YOUR ACCOUNT.\n```\n\nNotice what happens when we type the correct PIN on the first try:\n\n```\nWELCOME TO THE BANK OF GALLO.\nENTER YOUR PIN: 12345\n\nPIN ACCEPTED. YOU NOW HAVE ACCESS TO YOUR ACCOUNT.\n\n```\n\nWhat You Should Do on Your Own\n------------------------------\n\n\nAssignments turned in *without* these things will receive\nno credit.\n\n1. How is a `while` loop similar to an `if` statement?\n2. How is a `while` loop different from an `if` statement?\n3. What would we have to change in our program if the `PIN` was stored as an integer rather than a string? For example if it was initialized as `PIN = 12345`.\n4. Comment out the line `entry = input(...)` from inside the `while` loop. What happens? Why?\n5. (Uncomment the `entry = input(...)` before you turn in the assignment.)\n\n\n\n\n\n\n\n```\n\n\n\n```\n\n\n\n---\n\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\n\n\n\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "While Loops",
        "number": 49,
        "name": "Keep Guessing",
        "points": "50",
        "markdown": "# Keep Guessing\n\n\nModify your previous [number-guessing game](a-number-guessing-game.md) so that they can guess **until** they get it right. That means it will keep looping as long as the guess is different from the secret number. Use a `while` loop.\n\nName your file: `keep_guessing.py`\n\n```\nI have chosen a number between 1 and 10. Try to guess it.\nYour guess: 5\nThat is incorrect. Guess again.\nYour guess: 4\nThat is incorrect. Guess again.\nYour guess: 8\nThat is incorrect. Guess again.\nYour guess: 6\nThat's right! You're a good guesser.\n\n```\n\n---\n\n\n\u00c2\u00a92013 [Graham Mitchell](https://programmingbydoing.com)\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n"
    },
    {
        "section": "While Loops",
        "number": 50,
        "name": "Dice Doubles",
        "points": "45",
        "markdown": "# Dice Doubles\n\n\nModify your dice game from last time so that it keeps rolling\nuntil they get doubles (the same number on both dice).\n\n\nNotice that since there's no user input, this will happen very\nquickly (all the rolls will happen one right after the other).\n\nName your file: `dice_doubles.py`\n\n```\nHERE COMES THE DICE!\n\nRoll #1: 3\nRoll #2: 5\nThe total is 8!\n\nRoll #1: 6\nRoll #2: 1\nThe total is 7!\n\nRoll #1: 2\nRoll #2: 5\nThe total is 7!\n\nRoll #1: 1\nRoll #2: 1\nThe total is 2!\n\n```\n\n---\n\n\n\u00c2\u00a92013 [Graham Mitchell](https://programmingbydoing.com/)\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n"
    },
    {
        "section": "While Loops",
        "number": 51,
        "name": "Counting with a While Loop",
        "points": "30",
        "markdown": "# Counting with a While Loop\n\n\nType in the following code, and get it to run. This assignment shows you\nhow we can use a `while` loop to make something repeat an\nexact number of times.\n\nName the file: `counting_while.py`\n\n```python\nprint(\"Type in a message, and I'll display it five times.\")\n\nmessage = input(\"Message: \")\nprint()\n\nn = 0\nwhile n < 5:\n    print(f\"{n + 1}. {message}\")\n    n += 1\n```\n\nNormally, `while` loops are best for repeating *as long as*\nsomething is true:\n\n* Keep going as long as they haven't guessed it.\n* Keep going as long as you haven't got doubles.\n* Keep going as long as they keep typing in a negative number.\n* Keep going as long as they haven't typed in a zero.\n\nBut sometimes, we know in advance how many times we want to do something.\n\n* Do this ten times.\n* Do this five times.\n* Pick a random number, and do it that many times.\n* Take this list of items, and do it one time for each item in the list.\n\nWe can do that sort of thing with a `while` loop, but we have\nto use a counter. A counter is a number variable (`int`) that starts with a value of `0`, and then we add `1` to it whenever something happens. So, here, we're going to be adding `1` to the counter everytime we repeat the loop. And when the counter reaches a predetermined value, we'll stop looping.\n\n\nWhat You Should See\n-------------------\n\n```\nType in a message, and I'll display it five times.\nMessage: I will not swear in class\n\n1. I will not swear in class\n2. I will not swear in class\n3. I will not swear in class\n4. I will not swear in class\n5. I will not swear in class\n```\n\nWhat You Should Do on Your Own\n------------------------------\nAssignments turned in *without* these things will receive\nno credit.\n\n1. What does `n += 1` do? Remove it and see what happens. (Then put it back.) `ctrl + c` may come in handy.\n2. Change the code so that the loop repeats ten times instead of five.\n3. See if you can change the code so that the message still prints ten times, but the numbers in front count by tens, like so:\n\n\t```\n\tType in a message, and I'll display it ten times.\n\tMessage: I'm sending out an S.O.S.\n\n\t10. I'm sending out an S.O.S.\n\t20. I'm sending out an S.O.S.\n\t30. I'm sending out an S.O.S.\n\t40. I'm sending out an S.O.S.\n\t50. I'm sending out an S.O.S.\n\t60. I'm sending out an S.O.S.\n\t70. I'm sending out an S.O.S.\n\t80. I'm sending out an S.O.S.\n\t90. I'm sending out an S.O.S.\n\t100. I'm sending out an S.O.S.\n\t```\n4. Change the code so that it asks the person how many times to display the message. Then, print it that many times. Still count by tens.\n\t```\n\tType in a message, and I'll display it several times.\n\tMessage: HELLO! My name is Inigo Montoya. You killed my father; prepare to die.\n\n\tHow many times? 3\n\t10. HELLO! My name is Inigo Montoya. You killed my father; prepare to die.\n\t20. HELLO! My name is Inigo Montoya. You killed my father; prepare to die.\n\t30. HELLO! My name is Inigo Montoya. You killed my father; prepare to die.\n\t```\n\n---\n\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\n\n\n\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "While Loops",
        "number": 52,
        "name": "PIN Lockout",
        "points": "10",
        "markdown": "# PIN Lockout\n\nType in the following code, and get it to run.\n\nName the file: `pin_lockout.py`\n\n```python\nPIN = \"12345\"\ntries = 0\n\nprint(\"WELCOME TO THE BANK OF GALLO.\")\nentry = input(\"ENTER YOUR PIN: \")\ntries += 1\n\nwhile entry != PIN and tries < 3:\n    print(\"\\nINCORRECT PIN. TRY AGAIN.\")\n    entry = input(\"ENTER YOUR PIN: \")\n    tries += 1\n\nif entry == PIN:\n    print(\"\\nPIN ACCEPTED. YOU NOW HAVE ACCESS TO YOUR ACCOUNT.\")\nelif tries >= 3:\n    print(\"\\nYOU HAVE RUN OUT OF TRIES. ACCOUNT LOCKED.\")\n```\n\nWhat You Should See\n-------------------\n\n```\nWELCOME TO THE BANK OF GALLO.\nENTER YOUR PIN: 90210\n\nINCORRECT PIN. TRY AGAIN.\nENTER YOUR PIN: 11111\n\nINCORRECT PIN. TRY AGAIN.\nENTER YOUR PIN: 54321\n\nYOU HAVE RUN OUT OF TRIES. ACCOUNT LOCKED.\n```\n\nWhat You Should Do on Your Own\n------------------------------\nAssignments turned in *without* these things will receive\nno credit.\n\n1. Change the code so that it locks them out after `4` tries instead of `3`. Make sure to change the condition at the bottom, too.\n2. Make a variable (constant) for the number of maximum tries allowed. Use that variable everywhere instead of just the number.\n\n---\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "While Loops",
        "number": 53,
        "name": "Number-Guessing with a Counter",
        "points": "40",
        "markdown": "# Number-Guessing with a Counter\n\nModify your previous [number-guessing game](keep-guessing.md)\nso that they can guess until they get it right **AND**\ncount the number of tries it takes them to guess it.\n\nName the file: `guess_with_counter.py`\n\n\n```\nI have chosen a number between 1 and 10.  Try to guess it.\nYour guess: 5\nThat is incorrect.  Guess again.\nYour guess: 4\nThat is incorrect.  Guess again.\nYour guess: 8\nThat is incorrect.  Guess again.\nYour guess: 6\nThat's right!  You're a good guesser.\nIt only took you 4 tries.\n\n```\n\n---\n\n\u00c2\u00a92013 [Graham Mitchell](https://programmingbydoing.com/)\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n"
    },
    {
        "section": "While Loops",
        "number": 54,
        "name": "Hi-Lo with Limited Tries",
        "points": "55",
        "markdown": "# Hi-Lo with Limited Tries\n\n\nWrite a program that picks a random number from `1-100`.\nThe user keeps guessing as long as their guess is wrong,\n**and** they've guessed less than `7` times. If their\nguess is higher than the number, say `\"Too high.\"` If their guess\nis lower than the number, say `\"Too low.\"` When they get it right,\nthe game stops. Or, if they hit seven guesses, the game stops\neven if they never got it right.\n\n\nThis means your `while` loop will have a compound condition using `and`.\n\nName the file: `hi_lo_limited.py`\n\n```\nI'm thinking of a number between 1-100.  You have 7 guesses.\nFirst guess: 50\nSorry, you are too low.\nGuess # 2: 75\nSorry, you are too low.\nGuess # 3: 87\nSorry, that guess is too high.\nGuess # 4: 82\nSorry, you are too low.\nGuess # 5: 84\nYou guessed it!  What are the odds?!?\n\n```\n\n```\nI'm thinking of a number between 1-100.  You have 7 guesses.\nFirst guess: 1\nSorry, you are too low.\nGuess # 2: 2\nSorry, you are too low.\nGuess # 3: -8\nSorry, you are too low.\nGuess # 4: 0\nSorry, you are too low.\nGuess # 5: 7\nSorry, you are too low.\nGuess # 6: 612\nSorry, that guess is too high.\nGuess # 7: -523\nSorry, you didn't guess it in 7 tries.  You lose.\n\n```\n\n---\n\n\u00c2\u00a92013 [Graham Mitchell](https://programmingbydoing.com/)\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n"
    },
    {
        "section": "While Loops",
        "number": 55,
        "name": "Adding Values in a Loop",
        "points": "30",
        "markdown": "# Adding Values in a Loop\n\nWrite a program that gets several integers from the user. Sum\nup all the integers they give you. Stop looping when they enter a `0`.\nDisplay the total at the end.\n\nYou must use a `while` loop.\n\nName the file: `adding_in_loop.py`\n```\nI will add up the numbers you give me.\nNumber: 6\nThe total so far is 6\nNumber: 9\nThe total so far is 15\nNumber: -3\nThe total so far is 12\nNumber: 2\nThe total so far is 14\nNumber: 0\n\nThe total is 14.\n```\n\n```\nI will add up the numbers you give me.\nNumber: 1\nThe total so far is 1\nNumber: 2\nThe total so far is 3\nNumber: 3\nThe total so far is 6\nNumber: 4\nThe total so far is 10\nNumber: 5\nThe total so far is 15\nNumber: 0\n\nThe total is 15\n```\n\n---\n\n\n\u00c2\u00a92013 [Graham Mitchell](https://programmingbydoing.com/)\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n"
    },
    {
        "section": "Post-test Loops",
        "number": 56,
        "name": "Swimming",
        "points": "15",
        "markdown": "# Swimming\n\n\nSo far you have only worked with one type of loop: the `while`\nloop. But there is another type: the \"do-while\" loop.\n\n\nThe do-while loop works *almost* exactly like a\n`while` loop. In fact, most of the time they\nare equivalent. Examine the program below to see if you can figure\nout the tiny difference.\n\n\n## Files Needed\n\n```eval_rst\n* :download:`swimming.py <examples/swimming.py>`\n```\n\n\nWhat You Should See\n-------------------\n\nGoofus and Gallant are both going swimming. They hate to swim in cold water; once the water temperature drops below `79\u00c2\u00b0`F, they stop.\n\n\nRun the program, and type in `80.5` for the water temperature.\n\n```\nWhat is the current water temperature? 80.5\n\nOkay, so the current water temperature is 80.5 F.\nGALLANT approaches the lake....\n    GALLANT swims for a bit. Swim time: 1 min.\n    The current water temperature is now 80.0 F.\n    GALLANT swims for a bit. Swim time: 2 min.\n    The current water temperature is now 79.5 F.\n    GALLANT swims for a bit. Swim time: 3 min.\n    The current water temperature is now 79.0 F.\n    GALLANT swims for a bit. Swim time: 4 min.\n    The current water temperature is now 78.5 F.\nGALLANT stops swimming. Total swim time: 4 min.\n\nOkay, so the current water temperature is 80.5 F.\nGOOFUS  approaches the lake....\n    GOOFUS  swims for a bit. Swim time: 1 min.\n    The current water temperature is now 80.0 F.\n    GOOFUS  swims for a bit. Swim time: 2 min.\n    The current water temperature is now 79.5 F.\n    GOOFUS  swims for a bit. Swim time: 3 min.\n    The current water temperature is now 79.0 F.\n    GOOFUS  swims for a bit. Swim time: 4 min.\n    The current water temperature is now 78.5 F.\nGOOFUS  stops swimming. Total swim time: 4 min.\n\n```\n\nWhat You Should Do on Your Own\n------------------------------\n\nAssignments turned in *without* these things will receive\nno credit.\n\n1. Run the program, and type in 80.5 for the current\n water temperature. Do Goofus and Gallant swim for the same amount of\n time? Put your answer in a comment.\n2. Run the program again, but this time enter 78 for the starting temperature. What changes?\n3. Does Gallant check the water temperature first, or does he just dive right in?\n4. What about Goofus? Does he check the water temperature first or just dive in?\n5. What is the difference between the first `while` loop and the second `while` loop? What do you suppose the keyword `break` does in the second loop?\n6. One of these loops is sometimes called a \"pre-test loop\",\n and the other is called a \"post-test loop\". Which one is which?\n\n---\n\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "Post-test Loops",
        "number": 57,
        "name": "Flip Again?",
        "points": "20",
        "markdown": "# Flip Again?\n\nIn this program, you'll see how using a \"while True and break\" (post-test) loop might be better than a regular `while` loop.\n\n\n## Files Needed\n\n```eval_rst\n* :download:`flip_again.py <examples/flip_again.py>`\n```\n\n\nWhat You Should See\n-------------------\n\nThe code I have provided does not run. Once you fix it, it will look roughly like this.\n\n```\nYou flip a coin and it is... TAILS\nWould you like to flip again (y/n)? y\nYou flip a coin and it is... HEADS\nWould you like to flip again (y/n)? y\nYou flip a coin and it is... HEADS\nWould you like to flip again (y/n)? n\n```\n\nWhat You Should Do on Your Own\n------------------------------\nAssignments turned in *without* these things will receive\nno credit.\n\n1. The code as given does not run. Notice that the `while` tests if `again == \"y\"`, but the variable `again` doesn't have a string value at first. Give it a string value so that the code will not encounter a run-time error and the loop will run at least once.\n2. Now that program is working, change the loop from a *pre-test* `while` loop to a *post-test* \"while-true\" loop. Make sure it still works. \n3. What happens if you delete the `again = \"y\"` line right before the loop? Does the program still work? Why or why not? (Answer in a comment.)\n\n\n---\n\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "Post-test Loops",
        "number": 58,
        "name": "Shorter Double Dice",
        "points": "40",
        "markdown": "# Shorter Double Dice\n\n\nRedo the [Dice Doubles](dice-doubles.md) assignment (the\ndice program with a loop) so that it uses a post-test \"while-true-break\"\nloop instead of a regular `while` loop. Other than that it should\nbehave exactly the same.\n\nIf you do this correctly, there should be less code in this version.\n\nName your file: `shorter_double_dice.py`\n\n```\nHERE COME THE DICE!\n\nRoll #1: 3\nRoll #2: 5\nThe total is 8!\n\nRoll #1: 6\nRoll #2: 1\nThe total is 7!\n\nRoll #1: 2\nRoll #2: 5\nThe total is 7!\n\nRoll #1: 1\nRoll #2: 1\nThe total is 2!\n\n```\n\nFrequently-Asked Questions\n--------------------------\n\n- Why should we use a post-test \"while-true-then-break\" loop when a regular `while` loop will do?\n    - It just cleans up the code a bit by reducing repeated code (which is a pattern you want to reduce whenever possible). See [the DRY principal article](https://en.wikipedia.org/wiki/Don%27t_repeat_yourself)\n\n---\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "Post-test Loops",
        "number": 59,
        "name": "Again with the Number-Guessing",
        "points": "35",
        "markdown": "# Again with the Number-Guessing\n\n\nRedo the [Number-Guessing with a Counter](number-guessing-with-a-counter.md)\nassignment using a post-test loop instead\nof a `while` loop. Otherwise it should do exactly the\nsame things (including the counter).\n\nMake sure that it doesn't mess up if you guess it on the first try.\n\nName your file: `guess_again.py`\n\n```\nI have chosen a number between 1 and 10.  Try to guess it.\nYour guess: 5\nThat is incorrect.  Guess again.\nYour guess: 4\nThat is incorrect.  Guess again.\nYour guess: 8\nThat is incorrect.  Guess again.\nYour guess: 6\nThat's right!  You're a good guesser.\nIt only took you 4 tries.\n```\n\n---\n\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "While Loops II",
        "number": 60,
        "name": "Safe Square Root",
        "points": "55",
        "markdown": "# Safe Square Root\n\nWrite a program to take the square root of a number typed in by\nthe user. Your program should use a loop to ensure that the number they\ntyped in is positive. If the number is negative, you should print out\nsome sort of warning and make them type it in again.\n\nYou can get the square root of a number `n` with\n`math.sqrt(n)`, if you import the `math` library.\n\n```python\nimport math\n\n\nmath.sqrt(49)  # 7\n```\n\nMake sure you don't try to find the square root until the loop is done and you know *for sure* you've got a positive number.\n\nName the file: `safe_square_root.py`\n\n```\nSQUARE ROOT!\nEnter a number: 9\nThe square root of 9 is 3.0.\n\n```\n\n```\nSQUARE ROOT!\nEnter a number: 2\nThe square root of 2 is 1.4142135623730951.\n\n```\n\n```\nSQUARE ROOT!\nEnter a number: -9\nYou can't take the square root of a negative number, silly.\nTry again: -10\nYou can't take the square root of a negative number, silly.\nTry again: 10\nThe square root of 10 is 3.1622776601683795.\n\n```\n\n---\n\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "While Loops II",
        "number": 61,
        "name": "Right Triangle Checker",
        "points": "65",
        "markdown": "# Right Triangle Checker\n\nWrite a program to allow the user to enter three integers. You\nmust use pre-test or post-test `while`\nloops to enforce that these integers are in ascending order,\nthough duplicate numbers are allowed.\n\n\nTell the user whether or not these integers would represent the\nsides of a right triangle.\n\nName the file: `right_triangle_checker.py`\n\n```\nEnter three integers:\nSide 1: 4\nSide 2: 3\n3 is smaller than 4.  Try again.\nSide 2: -9\n-9 is smaller than 4.  Try again.\nSide 2: 5\nSide 3: 1\n1 is smaller than 5.  Try again.\nSide 3: 5\n\nYour three sides are 4 5 5\nNO!  These sides do not make a right triangle!\n\n```\n\n\n```\nEnter three integers:\nSide 1: 6\nSide 2: 8\nSide 3: 10\n\nYour three sides are 6 8 10\nThese sides *do* make a right triangle.  Yippy-skippy!\n\n```\n\n\n\n---\n\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "While Loops II",
        "number": 62,
        "name": "Collatz Sequence",
        "points": "30-60",
        "markdown": "# Collatz Sequence\n\n\nTake any natural number *n*.\n\n\n* If *n* is even, divide it by 2 to get *n* / 2.\n* If *n* is odd, multiply it by 3 and add 1 to get 3*n* + 1.\n* Repeat the process indefinitely.\n\n\nIn 1937, Lothar Collatz proposed that no matter what number you begin with,\nthe sequence eventually reaches 1. This is widely believed to be true, but\nhas never been formally proved.\n\nWrite a program that inputs a number from the user, and then displays\nthe Collatz Sequence starting from that number. Stop when you reach 1.\n\nName your file: `collatz_sequence.py`\n\nSample Output\n-------------\nHere's an example of the expected output, assuming I start with 6 and\nprint tabs between each number.\n\n```\nStarting number: 6\n6     3      10     5      16     8      4      2     1\n\n```\n\nOr, starting with a different number:\n\n```\nStarting number: 11\n11    34    17    52    26    13    40    20    10    5\n16    8     4     2     1\n\n```\n\nSome numbers take quite a while to reach 1:\n\n```\nStarting number: 27\n27    82    41    124   62    31    94    47    142   71214   107   322   161   484   242   121   364   182   91274   137   412   206   103   310   155   466   233   700350   175   526   263   790   395   1186  593   1780  890445   1336  668   334   167   502   251   754   377   1132566   283   850   425   1276  638   319   958   479   1438719   2158  1079  3238  1619  4858  2429  7288  3644  1822911   2734  1367  4102  2051  6154  3077  9232  4616  23081154  577   1732  866   433   1300  650   325   976   488244   122   61    184   92    46    23    70    35    10653    160   80    40    20    10    5     16    8     42     1\n```\n\nBonus #1 - Count Steps\n----------------------\nFor +10 bonus points, also display the total number of steps in the sequence.\n\n```\nStarting number: 11\n11    34    17    52    26    13    40    20    10    5\n16    8     4     2     1\n\nTerminated after 14 steps.\n```\n\n\n```\nStarting number: 27\n27    82    41    124   62    31    94    47    142   71214   107   322   161   484   242   121   364   182   91274   137   412   206   103   310   155   466   233   700350   175   526   263   790   395   1186  593   1780  890445   1336  668   334   167   502   251   754   377   1132566   283   850   425   1276  638   319   958   479   1438719   2158  1079  3238  1619  4858  2429  7288  3644  1822911   2734  1367  4102  2051  6154  3077  9232  4616  23081154  577   1732  866   433   1300  650   325   976   488244   122   61    184   92    46    23    70    35    10653    160   80    40    20    10    5     16    8     4    2     1\n\nTerminated after 111 steps.\n\n```\n\nBonus #2 - Largest Value\n------------------------\nFor +20 bonus points, display the largest value encounted in the sequence.\n\n```\nStarting number: 11\n11    34    17    52    26    13    40    20    10    5\n16    8     4     2     1\n\nThe largest value was 52.\n\n```\n\n\n\n```\nStarting number: 27\n27    82    41    124   62    31    94    47    142   71\n214   107   322   161   484   242   121   364   182   91\n274   137   412   206   103   310   155   466   233   700\n350   175   526   263   790   395   1186  593   1780  890\n445   1336  668   334   167   502   251   754   377   1132\n566   283   850   425   1276  638   319   958   479   1438\n719   2158  1079  3238  1619  4858  2429  7288  3644  1822\n911   2734  1367  4102  2051  6154  3077  9232  4616  2308\n1154  577   1732  866   433   1300  650   325   976   488\n244   122   61    184   92    46    23    70    35    106\n53    160   80    40    20    10    5     16    8     4\n2     1\n\nThe largest value was 9232.\n\n```\n\nBonus #3\n--------\nFor +30 bonus points, do both.\n\n\n```\nStarting number: 11\n11    34    17    52    26    13    40    20    10    5\n16    8     4     2     1\n\nTerminated after 14 steps. The largest value was 52.\n\n```\n\n---\n\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "While Loops II",
        "number": 63,
        "name": "Short Adventure 2: With a Loop",
        "points": "75",
        "markdown": "# Adventure 2\n\n\nMake another short \"Choose Your Own Adventure\" game. However, this\ntime you need to use a loop so that they can freely move from room to\nroom and back again.\n\n\nThere need to be at least six rooms or destinations, and at least two\ndifferent ways for the game to end.\n\n\n## Files Needed\n\n```eval_rst\n* :download:`adventure2.py <examples/adventure2.py>` - empty shell\n``` \n```eval_rst\n* :download:`adventure2_example.py <examples/adventure2_example.py>` - tiny sample game\n``` \n\nName your file: `adventure2.py`\n\n```\nMITCHELL'S TINY ADVENTURE 2!\n\nYou are in a creepy house!  Would you like to go \"upstairs\" or into the\n\"kitchen\"?\n> kitchen\n\nThere is a long countertop with dirty dishes everywhere.  Off to one side\nthere is, as you'd expect, a refrigerator.  You may open the \"refrigerator\"\nor go \"back\".\n> back\n\nYou are in a creepy house!  Would you like to go \"upstairs\" or into the\n\"kitchen\"?\n> upstairs\n\nUpstairs you see a hallway.  At the end of the hallway is the master\n\"bedroom\".  There is also a \"bathroom\" off the hallway.  Or, you can\ngo back \"downstairs\". Where would you like to go?\n> downstairs\n\nYou are in a creepy house!  Would you like to go \"upstairs\" or into the\n\"kitchen\"?\n> kitchen\n\nThere is a long countertop with dirty dishes everywhere.  Off to one side\nthere is, as you'd expect, a refrigerator.  You may open the \"refrigerator\"\nor go \"back\".\n> refrigerator\n\nInside the refrigerator you see food and stuff.  It looks pretty nasty.\nWould you like to eat some of the food? (\"yes\" or \"no\")\n> yes\n\nThe food is slimy and foul, but you manage to choke it down. Your stomach\nstarts jumping like a frog in hot water.  You feel faint. Sliding to the\nfloor, the darkness closes in.\n\nYou have died.\n\n```\n\n\n---\n\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "While Loops II",
        "number": 63.1,
        "name": "Baby Nim",
        "points": "60",
        "markdown": "# Baby Nim\n\nWrite a program that starts with three \"piles\" of 3 counters each. Let the player choose piles and remove counters until all the piles are empty.\n\n1. Start by placing counters (coins or toothpicks or something) into 3 piles.\n2. The player picks a pile, then removes one or more counters from that pile. (It's okay to take the whole pile.)\n3. The player picks a new pile, then removes one or more counters from that pile. (It's okay to pick the same pile as before.)\n4. Once all piles are empty, the game stops.\n\nYou do not need to check for errors like a wrong pile name, or if someone tries to take more counters from the pile than the pile has.\n\nName your file `063b_baby_nim.py`\n\nSample Output\n-------------\n```\nA: 3\tB: 3\tC: 3\n\nChoose a pile: A\nHow many to remove from pile A: 2\n\nA: 1\tB: 3\tC: 3\n\nChoose a pile: C\nHow many to remove from pile C: 3\n\nA: 1\tB: 3\tC: 0\n\nChoose a pile: B\nHow many to remove from pile B: 1\n\nA: 1\tB: 2\tC: 0\n\nChoose a pile: A\nHow many to remove from pile A: 1\n\nA: 0\tB: 2\tC: 0\n\nChoose a pile: B\nHow many to remove from pile B: 1\n\nA: 0\tB: 1\tC: 0\n\nChoose a pile: C\nHow many to remove from pile C: 2\n\nA: 0\tB: 1\tC: -2\n\nChoose a pile: B\nHow many to remove from pile B: 1\n\nA: 0\tB: 0\tC: -2\n\nAll piles are empty. Good job!\n```\n\n---\n\n\n\u00c2\u00a92013 [Graham Mitchell](https://programmingbydoing.com/)\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n"
    },
    {
        "section": "While Loops II",
        "number": 63.2,
        "name": "Nim",
        "points": "70-185",
        "markdown": "# Nim\n\nNim is a strategy game between two players.\n\n1. Start by placing counters (coins or toothpicks or something) into 3 piles.\n2. Player #1 picks a pile, then removes one or more counters from that pile. (It's okay to take the whole pile.)\n3. Player #2 picks a pile, then removes one or more counters from that pile.\n4. Player #1 plays again. (It's okay to choose a different pile this time.)\n5. Whichever player is forced to take the last counter is the LOSER.\n\nWrite a program that allows two human players to play Nim against each other. The program should detect when the last counter has been taken and declare a winner.\n\nAt first, don't worry about detecting cheating. That is one of the bonus options.\n\nName your file `063c_nim.py`\n\nSample Output\n-------------\nHere is an example game, with starting piles of 3, 4, and 5 counters.\n```\nPlayer 1, enter your name: Alice\nPlayer 2, enter your name: Bob\n\nA: 3\tB: 4\tC: 5\n\nAlice, choose a pile: A\nHow many to remove from pile A: 2\n\nA: 1\tB: 4\tC: 5\n\nBob, choose a pile: C\nHow many to remove from pile C: 3\n\nA: 1\tB: 4\tC: 2\n\nAlice, choose a pile: B\nHow many to remove from pile B: 1\n\nA: 1\tB: 3\tC: 2\n\nBob, choose a pile: B\nHow many to remove from pile B: 1\n\nA: 1\tB: 2\tC: 2\n\nAlice, choose a pile: A\nHow many to remove from pile A: 1\n\nA: 0\tB: 2\tC: 2\n\nBob, choose a pile: B\nHow many to remove from pile B: 1\n\nA: 0\tB: 1\tC: 2\n\nAlice, choose a pile: C\nHow many to remove from pile C: 2\n\nA: 0\tB: 1\tC: 0\n\nBob, choose a pile: B\nHow many to remove from pile B: 1\n\nA: 0\tB: 0\tC: 0\n\nAlice, there are no counters left, so you WIN!\n```\n\nBonus #1 - Cheat Protection\n---------------------------\nFor +30 bonus points, prevent the users from doing anything bad:\n```\n...a game already in progress.\n\nA: 0\tB: 1\tC: 0\n\nBob, choose a pile: A\n\nNice try, Bob. That pile is empty. Choose again: B\nHow many to remove from pile B: 0\n\nYou must choose at least 1. How many? 1\n\nA: 0\tB: 0\tC: 0\n```\n\nAnd what about this?\n```\nA: 1\tB: 4\tC: 5\n\nBob, choose a pile: C\nHow many to remove from pile C: 8\n\nPile C doesn't have that many. Try again: 3\n\nA: 1\tB: 4\tC: 2\n```\nAnd don't forget this:\n```\nA: 1\tB: 4\tC: 5\n\nBob, choose a pile: C\nHow many to remove from pile C: -2\n\nYou must choose at least 1. How many? 3\n\nA: 1\tB: 4\tC: 2\n```\nBonus #2 - Dignity\n------------------\nFor +10 bonus points, make your program detect when there is only one counter left and declare the winner one turn earlier.\n```\n...a game already in progress.\n\nA: 0\tB: 2\tC: 2\n\nBob, choose a pile: B\nHow many to remove from pile B: 1\n\nA: 0\tB: 1\tC: 2\n\nAlice, choose a pile: C\nHow many to remove from pile C: 2\n\nA: 0\tB: 1\tC: 0\n\nBob, you must take the last remaining counter, so\nyou lose. Alice wins!\n```\nBonus #3 - Fancy Display (Rows)\n-------------------------------\nFor +15 bonus points, visually display the counters in rows instead of just showing a number. You must use loops for this.\n```\nA: ***\nB: ****\nC: *****\n\nAlice, choose a pile: A\nHow many to remove from pile A: 2\n\nA: *\nB: ****\nC: *****\n\nBob, choose a pile: C\nHow many to remove from pile C: 3\n\nA: *\nB: ****\nC: **\n```\nBonus #4 - Fancy Display (Columns)\n----------------------------------\nFor +25 bonus points, visually display the counters in columns. You must use a loop for this.\n\nThis is quite difficult.\n```\n\n        *\n      * *\n    * * *\n    * * *\n    * * *\n    A B C\n\nAlice, choose a pile: A\nHow many to remove from pile A: 2\n\n        *\n      * *\n      * *\n      * *\n    * * *\n    A B C\n\nBob, choose a pile: C\nHow many to remove from pile C: 3\n \n      * \n      * \n      * *\n    * * *\n    A B C\n```\nBonus #5 - Computer Opponent\n----------------------------\nFor +50 bonus points, allow one human player to play against a computer opponent. The computer must attempt to win and not break any rules.\n\nIt is possible to make a computer player that ALWAYS wins if it goes first. The [Wikipedia article for Nim](https://en.wikipedia.org/wiki/Nim) explains the theory.\n\nHowever, your program does not need to use a winning strategy to earn bonus points: it merely must make only legal moves.\n\n---\n\n\n\u00c2\u00a92013 [Graham Mitchell](https://programmingbydoing.com/)\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n"
    },
    {
        "section": "For Loops",
        "number": 64,
        "name": "Counting with a For Loop",
        "points": "10",
        "markdown": "# Counting with a For Loop\n\n\nAs you saw in [Counting with a While Loop](counting-with-a-while-loop.md),\na `while` loop can be used to to make something happen an\nexact number of times.\n\nHowever, this isn't our best choice. `while` loops are\ndesigned to keep going *as long as* something is true. But if we know\nin advance how many times we want to do something, Python has a special kind of loop designed just for that: the `for` loop.\n\nType in the following code, and get it to run. Then answer the\nquestions down below.\n\nName the file: `counting_for.py`\n\n\n```python\nprint(\"Type in a message, and I'll display it five times.\")\n\nmessage = input(\"Message: \")\n\nfor n in range(0, 5, 1):\n    print(f\"{n}. {message}\")\n```\n\n`for` loops are best when we know in advance how many times we want to do something.\n\n\n* Do this ten times.\n* Do this five times.\n* Pick a random number, and do it that many times.\n* Take this list of items, and do it one time for each item in the list.\n\nOn the other hand, `while` loops are best for repeating *as long as*\nsomething is true:\n\n* Keep going as long as the player's health is greater than `0`.\n* Keep going as long as they haven't guessed it.\n* Keep going as long as they keep typing in a negative number.\n* Keep going as long as they haven't typed in a zero.\n\nWhat You Should See\n-------------------\n```\nType in a message, and I'll display it five times.\nMessage: Hello, Goodbye!\n0. Hello, Goodbye!\n1. Hello, Goodbye!\n2. Hello, Goodbye!\n3. Hello, Goodbye!\n4. Hello, Goodbye!\n```\n\nWhat You Should Do on Your Own\n------------------------------\nAssignments turned in *without* these things will receive\nno credit.\n\n1. What happens when you change the loop variable `n` to some other name?(Then change it back.) Why do you suppose I chose to name this particular loop variable \"n\"?\n2. How do the first two arguments (`0, 5`) given to the `range` function effect the loop? Change them and experiment. Change it back.\n3. What do you suppose the third number given to the `range` function is for? Change it to `2` and see. Change it back.\n4. What happens when you call the `range` function with only one number? i.e. `range(7)`?\n5. What happens when you call the range function with only two numbers? i.e. `range(3, 9)`?\n6. Change the code so that the loop repeats ten times instead of five.\n7. See if you can change the for loop so that the message starts at 2 and counts by twos, like so:\n    ```\n    Type in a message, and I'll display it ten times.\n    Message: qwerty\n    2. qwerty\n    4. qwerty\n    6. qwerty\n    8. qwerty\n    10. qwerty\n    12. qwerty\n    14. qwerty\n    16. qwerty\n    18. qwerty\n    20. qwerty\n    ```\n---\n\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\n\n\n\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "For Loops",
        "number": 65,
        "name": "Ten Times",
        "points": "15",
        "markdown": "# Ten Times\n\nWrite a program that prints the important phrase \"Hello, World!\"\non the screen ten times. Use a `for` loop to do it.\n\nName the file: `ten_times.py`\n\n```\nHello, World!\nHello, World!\nHello, World!\nHello, World!\nHello, World!\nHello, World!\nHello, World!\nHello, World!\nHello, World!\nHello, World!\n```\n\nIf you want, you can number the lines of output like so:\n\n```\n1. Hello, World!\n2. Hello, World!\n3. Hello, World!\n4. Hello, World!\n5. Hello, World!\n6. Hello, World!\n7. Hello, World!\n8. Hello, World!\n9. Hello, World!\n10. Hello, World!\n```\n\n---\n\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "For Loops",
        "number": 66,
        "name": "Counting Machine",
        "points": "20",
        "markdown": "# Counting Machine\n\nWrite a program that gets an integer from the user. Count from `0`\nto that number. Use a `for` loop to do it.\n\nName the file `counting_machine.py`\n\n```\nCount to: 19\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\n```\n\n```\nCount to: 8\n0 1 2 3 4 5 6 7 8\n```\n\n```\nCount to: 25\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\n```\n\n---\n\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\n\n\n\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "For Loops",
        "number": 67,
        "name": "Counting Machine Revisited",
        "points": "25",
        "markdown": "# Counting Machine Revisited\n\n\nWrite a program that gets three integers from the user. Count from\nthe first number to the second number in increments of the third number.\nUse a `for` loop to do it.\n\nName the file `counting_machine_revisited.py`\n\n```\nCount from: 4\nCount to  : 13\nCount by  : 3\n\n4 7 10 13\n```\n\n\u00c2\u00a0\n\n\n\n```\nCount from: 5\nCount to  : 20\nCount by  : 5\n\n5 10 15 20\n```\n\n\u00c2\u00a0\n\n\n\n```\nCount from: 2\nCount to  : 10\nCount by  : 1\n\n2 3 4 5 6 7 8 9 10\n```\n\n---\n\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\n\n\n\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "For Loops",
        "number": 68,
        "name": "Counting by Halves",
        "points": "20",
        "markdown": "# Counting By Halves\n\n\nWrite a program that uses a `for` loop. With the loop,\nmake the variable `x` go from `-10` to `10`, counting by `0.5`.\n(This means that `x` can't be an `int`.)\n\nName the file: `counting_by_halves.py`\n\n```\n \nx\n------\n-10.0\n-9.5\n-9.0\n-8.5\n-8.0\n...\n9.0\n9.5\n10.0\n\n```\n\n---\n\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\n\n\n\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "For Loops",
        "number": 69,
        "name": "Xs and Ys",
        "points": "15",
        "markdown": "# Xs and Ys\n\n\nWrite another program that uses a `for` loop. With the loop,\nmake the variable `x` go from `-10` to `10`, counting by `0.5`.\n(This means that `x` can't be an `int`.)\n\n\nInside the body of the loop, make another variable `y` \nbecome the current value of `x` squared. Then display the\ncurrent values of both `x` and `y`.\n\n\nTo get your output to line up like mine, use a tab (`\\t`).\n\nName the file `x_y.py`\n\n```\n x      y\n-----------------\n-10.0   100.00\n-9.5    90.25\n-9.0    81.00\n-8.5   \n-8.0    64.00\n...\n9.0     81.00\n9.5     90.25\n10.0    100.00\n\n```\n\n\n---\n\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\n\n\n\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "For Loops",
        "number": 70,
        "name": "Noticing Even Numbers",
        "points": "30",
        "markdown": "# Noticing Even Numbers\n\n\nWrite a program that uses a `for`\nloop to display all the numbers from `1` to `20`, marking those which\nare even (divisible by two). It should use modulus `2`: if the\nremainder is zero, it's divisible by `2`.\n\n\nThis means you'll need an `if` statement inside the loop.\n\nName your file: `notice_even.py`\n\n```\n# pseudo-code\nfor whatever...\n    if someting with modulus:\n        print(\"something\")\n    else:\n        print(\"something different\")\n\n```\n\n\n\n```\n1\n2 <\n3\n4 <\n5\n6 <\n7\n8 <\n9\n10 <\n11\n12 <\n13\n14 <\n15\n16 <\n17\n18 <\n19\n20 <\n\n```\n\n---\n\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\n\n\n\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "For Loops",
        "number": 71,
        "name": "Fizz Buzz",
        "points": "40",
        "markdown": "# Fizz Buzz\n\n\nWrite a program that prints the numbers from `1` to `100`. But for\nmultiples of three print `\"Fizz\"` instead of the number and for the multiples of five print `\"Buzz\"`. For numbers which are multiples of both three and five print `\"FizzBuzz\"`.\n\nName your file: `fizz_buzz.py`\n\n```\n1\n2\nFizz\n4\nBuzz\nFizz\n7\n8\nFizz\nBuzz\n11\nFizz\n13\n14\nFizzBuzz\n16\n17\nFizz\n19\nBuzz\n\t...\n97\n98\nFizz\nBuzz\n\n```\n\n---\n\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\n\n\n\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "For Loops",
        "number": 72,
        "name": "Letter at a Time",
        "points": "20",
        "markdown": "# Letter at a Time\n\n\nDid you know that using a for loop, you can examine a string one letter at a time? You can use `range` and tell it how long the string is.\n\n\n* `len()` returns an `int`\n representing the total number of characters in the String\n (including punctuation and whitespace). For example, if\n the variable `str` contains the String `\"hello\"`, then `len(str)` will\n return `5`.\n\n * `[n]` returns the\n `n`th character (`char`)\n in the String. The character positions are zero-based. If the variable `str` contains the String `\"ligature\"`, then `str[0]` (`str` at index `0`) will return `'l'`, and `str[4]` (`str` at index `4`) will return `'t'`.\n\n\n## Files Needed\n```eval_rst\n* :download:`letter_at_a_time.py <examples/letter_at_a_time.py>`\n```\n\nSave the file as: `letter_at_a_time.py`\n\nWhat You Should See\n-------------------\n```\nWhat is your message? Are you ready for this?\n\nYour message is 23 characters long.\nThe first character is at index 0 and is 'A'.\nThe last character is at index 22 and is '?'.\n\nHere are all the characters, one at a time:\n\n    0 - 'A'\n    1 - 'r'\n    2 - 'e'\n    3 - ' '\n    4 - 'y'\n    5 - 'o'\n    6 - 'u'\n    7 - ' '\n    8 - 'r'\n    9 - 'e'\n    10 - 'a'\n    11 - 'd'\n    12 - 'y'\n    13 - ' '\n    14 - 'f'\n    15 - 'o'\n    16 - 'r'\n    17 - ' '\n    18 - 't'\n    19 - 'h'\n    20 - 'i'\n    21 - 's'\n    22 - '?'\n\nYour message contains the letter 'a' 2 times.\n```\n\nWhat You Should Do on Your Own\n------------------------------\nAssignments turned in *without* these things will receive\nhalf credit or less.\n\n1. If you print `range(7)`, what do you see? What happens if you convert the range to a list and then print that out? E.g., `list(range(7))`\n2. The `for` loop is defined so that the loop variable `i` iterates through the entire range object `range(len(message))`. If the `message` was `\"Hello\"` what number would be sent to the range function? What numbers would be included within that range object? List them out.\n3. If a string variable contains the value `\"box\"`, what is its length? What is the index (position) of the last character (the `'x'`)?\n4. Currently the code prints out the number of 'a's in the message. Change it so that it instead prints out the number of vowels (`a A e E i I o O u U`).\n\n---\n\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\n\n\n\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "For Loops",
        "number": 73,
        "name": "For Loop Challenge",
        "points": "40",
        "markdown": "# For Loop Challenge\n\nGet a blank sheet of paper (scratch paper is fine) and something\nto write with. Tell your teacher you'd like to take the **For\nLoop Challenge**. They will ask you to write an arbitrary\n`for` loop on the sheet of paper. If you do it without\nany mistakes, you will receive full points.\n\n\nYou may take this challenge more than once, but you'll receive 5 fewer\npoints each time you do it. The `for` loop you must\nwrite will be different each time.\n\n\nHere's an example of what you'll be asked to do:\n\n> \"Write a for loop that prints out all the numbers from {start} to {end} counting by {increment}\n\n> \"Write a for loop that prints out all the numbers from 15 to 30, counting by 3s\"\n\n# Bonus\n\nIf you feel like you are up for a greater challenge you can offer to sum up the numbers, or sum up certain multiples as you print out the numbers.\n\n---\n\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "For Loops",
        "number": 74,
        "name": "Adding Values with a For Loop",
        "points": "30",
        "markdown": "# Adding Values with a For Loop\n\nWrite a program that gets an integer from the user. Add up all\nthe numbers from `1` to that number, and display the total.\nUse a `for` loop to do it.\n\nYou have done something like this [before](adding-values-in-a-loop.md).\n\nName the file `sum_for_loop.py`\n\n```\nNumber: 5\n\n1 2 3 4 5\nThe sum is 15.\n\n```\n\n```\nNumber: 8\n\n1 2 3 4 5 6 7 8\nThe sum is 36.\n\n```\n\n---\n\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\n\n\n\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "Projects",
        "number": 75,
        "name": "Baby Blackjack",
        "points": "20",
        "markdown": "# Baby Blackjack\n\n\nWrite a program that allows a human user to play a single hand of \"blackjack\" against a dealer.\n\n\n1. Pick two values from 1-10 for the player. These are the player's \"cards\".\n2. Pick two more values from 1-10 for the dealer.\n3. Whoever has the highest total is the winner.\n4. There is no betting, no busting, and no hitting. Save that for real blackjack.\n\nSave the file as `baby_blackjack.py`\n\n```\nBaby Blackjack!\n\nYou drew 6 and 5.\nYour total is 11.\n\nThe dealer has 7 and 3.\nDealer's total is 10.\n\nYOU WIN!\n\n```\n\n---\n\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\n\n\n\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "Projects",
        "number": 76,
        "name": "Project: Blackjack",
        "points": "80-200",
        "markdown": "# Project: Blackjack\n\nName this file as `blackjack.py`\n\nWrite a program that allows a human user to play a simplified version\nof Blackjack against a computer opponent. Make it as cool as you can.\n\nThe simplified blackjack rules are as follows:\n\n* Don't worry about suits or face cards; \"cards\" will have values from\n2-11, and all values are equally likely (that is, unlike a real blackjack\ngame, there's no greater chance of drawing a card with value 10).\n* Draw two cards for the player and display them.\n* Draw two cards for the \"dealer\" and display one of them, keeping the\nother one hidden.\n* Allow the player to \"hit\" as many times as he would like.\n* If the player \"busts\" (gets a total over 21), the dealer\nautomatically wins.\n* Allow the dealer to hit as many times as he would like. Dealer\nshould probably hit on sixteen or lower.\n* If the dealer busts, the player automatically wins.\n* Assuming no one has busted, the player with the highest total wins.\nDealer wins all ties.\n\nAs will be the case with all projects, this is not an assigment with a\nfixed goal. Programs that merely do what is listed above will be\npassing, but will certainly not be worth 100. In order to score a high\ngrade, programs must go above and beyond the specifications. Here are\nsuggested additional features to add:\n\n\n* Use realistic card values, with suits and faces from ace to king.\n* Incorporate wagering.\n* Display some sort of graphical cards.\n* Anything else interesting you can think of.\n\n\nBe aware that you won't get any extra points for adding additional\nfeatures if the basic program doesn't work. That is, if your program\ncan't successfully do the basics listed above, no amount of bells and\nwhistles will save your grade. Programs will be graded on the\nfollowing criteria:\n\n\n* Functionality - Does your program fulfill the basic requirements? Is it\ndone? And what else does it do? (50%)\n* Overall Impression - Is your program efficiently organized, or is there\na lot of duplicated code? Does it look well-written, or barely finished? (25%)\n* Bugs - does it compile? Are there obvious errors? Are there subtle\nerrors? (10%)\n* Internal Documentation - How easy is your code to understand? Are\nyou using good variable names? Are there any comments? (10%)\n* Readability - Is your program consistently indented in a manner\nthat reflects the structure of your code? Is it easy to read?\nAre there blank lines which break up the major sections of your code?\n(5%)\n\n\n```\nWelcome to Mitchell's blackjack program!\nYou get a 6 and a 5.\nYour total is 11.\n\nThe dealer has a 7 showing, and a hidden card.\nHis total is hidden, too.\n\nWould you like to \"hit\" or \"stay\"? hit\nYou drew a 8.\nYour total is 19.\n\nWould you like to \"hit\" or \"stay\"? stay\n\nOkay, dealer's turn.\nHis hidden card was a 3.\nHis total was 10.\n\nDealer chooses to hit.\nHe draws a 7.\nHis total is 17.\n\nDealer stays.\n\nDealer total is 17.\nYour total is 19.\n\nYOU WIN!\n\n```\n\n---\n\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\n\n\n\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "Graphics",
        "number": 77,
        "name": "Graphics Demo 1: Basics",
        "points": "20"
    },
    {
        "section": "Graphics",
        "number": 78,
        "name": "Graphics Demo 2: Arcs and Custom Colors",
        "points": "20"
    },
    {
        "section": "Graphics",
        "number": 79,
        "name": "Graphics Demo 3: Fonts and Lines",
        "points": "15"
    },
    {
        "section": "Graphics",
        "number": 80,
        "name": "A Circle",
        "points": "20"
    },
    {
        "section": "Graphics",
        "number": 81,
        "name": "A Smiling Face",
        "points": "40"
    },
    {
        "section": "Graphics",
        "number": 82,
        "name": "A Clock Face",
        "points": "50-70"
    },
    {
        "section": "Graphics",
        "number": 83,
        "name": "Graphing Lines",
        "points": "40"
    },
    {
        "section": "Graphics",
        "number": 84,
        "name": "Graphing Parabolas",
        "points": "40"
    },
    {
        "section": "Graphics",
        "number": 85,
        "name": "Graphics Demo 4: Polygons",
        "points": "40"
    },
    {
        "section": "Graphics",
        "number": 86,
        "name": "Drawing a Boring Triangle",
        "points": "30"
    },
    {
        "section": "Graphics",
        "number": 87,
        "name": "Drawing Random Triangles",
        "points": "60"
    },
    {
        "section": "Graphics",
        "number": 88,
        "name": "Drawing Random Right Triangles",
        "points": "80-140"
    },
    {
        "section": "Graphics",
        "number": 89,
        "name": "Sierpinski Triangle",
        "points": "150"
    },
    {
        "section": "Graphics",
        "number": 90,
        "name": "Boxy 1",
        "points": "50"
    },
    {
        "section": "Graphics",
        "number": 91,
        "name": "Boxy 2",
        "points": "40"
    },
    {
        "section": "Graphics",
        "number": 92,
        "name": "Boxy 3",
        "points": "60"
    },
    {
        "section": "Graphics",
        "number": 93,
        "name": "Smiling Face Function",
        "points": "80"
    },
    {
        "section": "Graphics",
        "number": 94,
        "name": "Forest and Trees",
        "points": "150"
    },
    {
        "section": "Graphics",
        "number": 95,
        "name": "Image Demo - Showing Images on the Screen",
        "points": "20"
    },
    {
        "section": "Graphics",
        "number": 96,
        "name": "Motivational Poster",
        "points": "50-80"
    },
    {
        "section": "Functions",
        "number": 97,
        "name": "Picture Menu",
        "points": "10",
        "markdown": "# Picture Menu\n\nIn this program, you'll see how to call functions. Functions\nare chunks of code with a name, and \"calling\" a function means\nto have the function to do its task for you.\n\n\n## Files Needed\n\n```eval_rst\n* :download:`picture_menu.py <examples/picture_menu.py>`\n```\n\n\nWhat You Should See\n-------------------\n\n```\n1. Butterfly\n2. Elephant\n3. Teddy Bear\n4. Snake\n\nWhich animal to draw? 1\n\n```\n\nWhat You Should Do on Your Own\n------------------------------\nAssignments turned in *without* these things will receive\nno credit.\n\n1. Add the two missing function calls for menu options 3 and 4.\n2. Change the code in the `if` statement for choice 1 so that it calls the 'butterfly' function twice instead of just once. What happens now when you run the program and choose option 1? (Answer in a comment right underneath where you added the extra function call.)\n\n---\n\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "Functions",
        "number": 98,
        "name": "Flicker Phrase",
        "points": "15",
        "markdown": "# Flicker Phrase\n\nFinish the program provided. You'll need to write five if statements\nand some function calls. If you do it right it should display a\nphrase in an interesting way.\n\n\n## Files Needed\n```eval_rst\n* :download:`flicker_phrase.py <examples/flicker_phrase.py>`\n```\n\nSave your file as `flicker_phrase.py`\n\nWhat You Should See\n-------------------\n```\nI pledge allegiance to the flag.\n```\n... but flickering on the screen.\n\nWhat You Should Do on Your Own\n------------------------------\nAssignments turned in *without* these things will receive\nno credit.\n\n1. Add the five if statements and function calls where indicated.\n2. (optional) Add a delay using `time.sleep()`\n\n---\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\n\n\n\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "Functions",
        "number": 99,
        "name": "Heron's Formula",
        "points": "15",
        "markdown": "# Heron's Formula\n\n\nIn this program, you'll look at a function that \"returns a\nvalue\". When you call on the function to do a task, it will\ngive you back a result.\n\n\n## Files Needed\n\n```eval_rst\n* :download:`herons_formula.py <examples/herons_formula.py>`\n```\n```eval_rst\n* :download:`herons_formula_no_function.py <examples/herons_formula_no_function.py>`\n```\n\nSave or rename `herons_formula.py` to `herons_formula.py`\n\nWhat You Should See\n-------------------\n```\nA triangle with sides 3,3,3 has an area of 2.0\nA triangle with sides 3,4,5 has an area of 6.0\nA triangle with sides 7,8,9 has an area of 26.832815729997478\nA triangle with sides 5,12,13 has an area of 30.0\nA triangle with sides 10,9,11 has an area of 42.42640687119285\nA triangle with sides 8,15,17 has an area of 60.0\n\n```\n\nWhat You Should Do on Your Own\n------------------------------\nAssignments turned in *without* these things will receive\nno credit.\n\n1. Run both files (`herons_formula.py` and `herons_formula_no_function.py`). Do they both produce the same output? (Answer in a comment in `herons_formula.py`.)\n2. How many lines long is `herons_formula_no_function.py`?\n How many lines long is `herons_formula.py` if you don't count the `10` lines of comments inside the `triangle_area()` function? \n (Put the answers to both questions in a comment in `herons_formula.py`.)\n3. There is a bug in the formula for both files. When `(a+b+c)` is an odd\n number, floor-dividing by `2` throws away the `.5`. Fix **both** files\n so that instead of `(a+b+c) // 2` you have `(a+b+c) / 2` everywhere\n it occurs. Was it easier to fix the file that used a function, or the one that didn't use a function? Answer in a comment.\n4. Add one more test to **both** files: find the area of a triangle with sides `9`, `9`, and `9`. Was it difficult to add to the file that used a function? Answer in a comment on the line below where you added the new function call.\n5. (You don't need to turn in `herons_formula_no_function.py`. Only turn in one file: `herons_formula.py`)\n\nWhat You Should See After Everything Is Done\n--------------------------------------------\n\n```\nA triangle with sides 3,3,3 has an area of 3.897114317029974\nA triangle with sides 3,4,5 has an area of 6.0\nA triangle with sides 7,8,9 has an area of 26.832815729997478\nA triangle with sides 5,12,13 has an area of 30.0\nA triangle with sides 10,9,11 has an area of 42.42640687119285\nA triangle with sides 8,15,17 has an area of 60.0\nA triangle with sides 9,9,9 has an area of 35.074028853269766\n\n```\n---\n\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "Functions",
        "number": 100,
        "name": "Distance Formula",
        "points": "50",
        "markdown": "# Distance Formula\n\nWrite a function to compute the distance between two points. Given\ntwo points `(x1, y1)` and `(x2, y2)`,the distance between these points is given by the formula:\n\n![the distance formula](images/distance_formula.gif)\n\nYou must name the function `distance`, and it must return a `float` giving the distance between the two points.\n\nName your file `distance.py`\n\n## Starter Code\n\n```python\ndef main():\n    # test the formula a bit\n    d1 = distance(-2, 1, 1, 5)\n    print(f\"(-2,1) to (1,5) => {d1}\")\n\n    d2 = distance(-2, -3, -4, 4)\n    print(f\"(-2,-3) to (-4,4) => {d2}\")\n\n    print(f\"(2,-3) to (-1,-2) => {distance(2, -3, -1, -2)}\")\n\n    print(f\"(4,5) to (4,5) => {distance(4, 5, 4, 5)}\" )\n\n\ndef distance(x1: int, y1: int, x2: int, y2: int) -> float:\n    # put your code in here, remove \"pass\"\n    pass\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\nWhat you should see\n-------------------\n\n```\n(-2,1) to (1,5) => 5.0\n(-2,-3) to (-4,4) => 7.280109889280518\n(2,-3) to (-1,-2) => 3.1622776601683795\n(4,5) to (4,5) => 0.0\n```\n---\n\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\n\n\n\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "Functions",
        "number": 101,
        "name": "Month Name",
        "points": "60",
        "markdown": "# Month Name\n\nWrite a function. It will return the name of a month of the year,\ngiven the month number, according to the table below. Make sure you\n**do not** put any input or output statements in the function;\nthe month number will be *passed in* by the `main` function and the string containing the name will be *returned* back to the `main` function.\n\n| Number | Month |\n| - | - |\n| 1 |January |\n| 2 |February |\n| 3 |March |\n| 4 |April |\n| 5 |May |\n| 6 |June |\n| 7 |July |\n| 8 |August |\n| 9 |September |\n| 10 | October |\n| 11 | November |\n| 12 | December |\n| anything else | error|\n\n\nThe function **must** be called `month_name()`,\nand must have one parameter (an `int`), and return a\n`str`.\n\nAnd finally, here's some starter code.\n\n```eval_rst\n* :download:`month_name.py <examples/month_name.py>`\n```\n\nFinal result\n------------\n```\nMonth 1: January\nMonth 2: February\nMonth 3: March\nMonth 4: April\nMonth 5: May\nMonth 6: June\nMonth 7: July\nMonth 8: August\nMonth 9: September\nMonth 10: October\nMonth 11: November\nMonth 12: December\nMonth 43: error\n\n```\n---\n\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\n\n\n\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "Functions",
        "number": 102,
        "name": "Month Offset",
        "points": "60",
        "markdown": "# Month Offset\n\nWrite a function to give you the \"month offset\" given a number\nrepresenting the month. This refers to the day of the week the month starts on (months don't all start on a Sunday, but throught the week). You can get the month offset from the following table:\n\n\n| Month | Month offset |\n| - | - |\n| 1 |1 |\n| 2 |4 |\n| 3 |4 |\n| 4 |0 |\n| 5 |2 |\n| 6 |5 |\n| 7 |0 |\n| 8 |3 |\n| 9 |6 |\n| 10 | 1 |\n| 11 | 4 |\n| 12 | 6 |\n| anything else | -1 |\n\nOf course, here's the starter code to test your function.\n\n\n```eval_rst\n* :download:`month_offset.py <examples/month_offset.py>`\n```\n\n```\nOffset for month 1: 1\nOffset for month 2: 4\nOffset for month 3: 4\nOffset for month 4: 0\nOffset for month 5: 2\nOffset for month 6: 5\nOffset for month 7: 0\nOffset for month 8: 3\nOffset for month 9: 6\nOffset for month 10: 1\nOffset for month 11: 4\nOffset for month 12: 6\nOffset for month 43: -1\n\n```\n\n---\n\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\n\n\n\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "Functions",
        "number": 103,
        "name": "Weekday Calculator",
        "points": "90",
        "markdown": "# Weekday Calculator\n\n\nUsing the functions you wrote in previous assignments and\nthe leap year function provided, write a function to determine the\nday of the week a person was born given his or her birthday. The\nfollowing steps should be used to find the day of the week\ncorresponding to any date from 1901 through the present.\n\nIn the following explanation, the following terms will be helpful.\nAssuming I type in a birthday as `\"6 10 1981\"`:\n\n\n- The *month* is `6`.  \n- The *day of the month* is `10`.  \n- The *year* is `1981`.\n\n```eval_rst\n* :download:`weekday_calculator.py <examples/weekday_calculator.py>`\n```\n\nInstructions\n------------\n*Tip*: I would comment-out the input section and leave the \"automatic tests\". This way, when you run the program you don't need to waste time typing anything in. The tests will tell you if your function is working or not. When you are convinced that it is working, you can uncomment that input section to turn the assignment in.\n\n**First**, paste in your `month_name`, `weekday_name`, and `month_offset` functions from your previous exercises.\n\nIn the `weekday` function:\n1. Find the number of years since `1900`, and put it into a variable called `years_since_1900`. Simply subtract `1900` from the year (`yyyy`) to get this.\n2. Divide the number of years since `1900` by `4`. Put the quotient in a variable called `total`. For example, if the person was born in `1983`, `years_since_1900` would be `83`. Divide `83` by `4` and store `20` in `total`. The result must be an integer, so use floor division.\n3. Also add the number of years since `1900` to `total`.\n4. Add the day of the month to `total`, but because we need to `0`-index the day of the month, we need to also subtract `1`.\n5. Using the function `month_offset()` you wrote, find the \"month offset\" and add it to `total`.\n6. If the year is a leap year and if the month you are working with is either January or February, then subtract `1` from the `total`. You can use the function `is_leap()` provided to determine if the year is a leap year.\n7. Find the remainder when `total` is divided by 7. Pass this remainder to the function `weekday_name()` you wrote to determine the day of the week the person was born. Store this in a variable called `weekday`.\n8. Finally, build up a single String value containing the whole date (day of week, month, day, year). You'll need to use the function `month_name()` you wrote to show the month name rather than its number.\n9. Return that String value.\n\n\nWhew. Here's some code to get you started.\n\n```\nWelcome to Mr. Mitchell's fantastic birth-o-meter!\n\nAll you have to do is enter your birthday, and it will tell you\nthe day of the week on which you were born.\n\nSome automatic tests....\n12 10 2003 => Wednesday December 10, 2003\n 2 13 1976 => Friday February 13, 1976\n 2 13 1977 => Sunday February 13, 1977\n 7  2 1974 => Tuesday July 2, 1974\n 1 15 2003 => Wednesday,January 15, 2003\n10 13 2000 => Friday October 13, 2000\n\nNow it's your turn!  What's your birthday?\nBirthday (mm dd yyyy):\nmm: 11\ndd: 11\nyyyy: 2010\n\nYou were born on Thursday November 11, 2010!\n\n```\n\n---\n\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\n\n\n\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "Functions",
        "number": 104,
        "name": "Area Calculator",
        "points": "110",
        "markdown": "# Area Calculator\n\nWrite a program to calculate the area of four different geometric\nshapes: triangles, squares, rectangles, and circles. You must use\nfunctions. Here are the functions you should create:\n\n![Copy-paste-proof image](images/area_calc_functions.jpg)\n\n\nName your file `area_calculator.py`\n\nYour program should present a menu for the human to choose which\nshape to calculate, then ask them for the appropriate values (length,\nwidth, radius, etc.). Then it should pass those values to the\nappropriate function and display the resulting area.\n\nNotice that you *must not* input the values inside\nthe functions, and you *must not* display the values inside\nthe functions. *All* input and output must be in the \n`main()` function, and values must be passed to the functions\nand returned from them.\n\nYou will need to construct your own `main` function and use the magical `if __name__ == \"__main__\":` statement as seen in previous assignments.\n\n\n\n| shape | formula |\n| - | - |\n| square | `A = s\u00c2\u00b2` |\n| rectangle | `A = l \u00c3\u2014 w` |\n| triangle | `A = \u00c2\u00bdbh` | \n| circle | `A = \u00cf\u20acr\u00c2\u00b2` |\n\n\n\nYou'll need the value of \u00cf\u20ac for `area_circle()`; feel\nfree to use the `math` library's pi variable.\n\n```python\nimport math\n\nmath.pi  # 3.141592653589793\n```\n\n\nThe menu should keep looping until the human chooses to quit.\n\n```\nShape Area Calculator version 0.1 (c) 2005 Mitchell Sample Output, Inc.\n\n-=-=-=-=-=-=-=-=-=-=-=-=-=-=-\n\n1) Triangle\n2) Rectangle\n3) Square\n4) Circle\n5) Quit\nWhich shape: 1\n\nBase: 5\nHeight: 6\n\nThe area is 15.\n\n-=-=-=-=-=-=-=-=-=-=-=-=-=-=-\n\n1) Triangle\n2) Rectangle\n3) Square\n4) Circle\n5) Quit\nWhich shape: 2\n\nLength: 10\nWidth: 4\n\nThe area is 40.\n\n-=-=-=-=-=-=-=-=-=-=-=-=-=-=-\n\n1) Triangle\n2) Rectangle\n3) Square\n4) Circle\n5) Quit\nWhich shape: 3\n\nSide length: 9\n\nThe area is 81.\n\n-=-=-=-=-=-=-=-=-=-=-=-=-=-=-\n\n1) Triangle\n2) Rectangle\n3) Square\n4) Circle\n5) Quit\nWhich shape: 4\n\nRadius: 4\n\nThe area is 50.2655.\n\n-=-=-=-=-=-=-=-=-=-=-=-=-=-=-\n\n1) Triangle\n2) Rectangle\n3) Square\n4) Circle\n5) Quit\nWhich shape: 5\n\nGoodbye.\n\n```\n\n---\n\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\n\n\n\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "Functions",
        "number": 105,
        "name": "Function Call Alphabet",
        "points": "90",
        "markdown": "# Function Call Alphabet\n\n\nDownload and finish the following code to practice writing function\ncalls.\n\n\n## Files Needed\n\n```eval_rst\n* :download:`function_call_alphabet.py <examples/function_call_alphabet.py>`\n```\n\n\nWhat You Should See\n-------------------\n\n\nNote that this exercise only requires you to write function calls.\nThe function implementations are already complete. If you do everything\ncorrectly, it should produce output like the following:\n\n\n\n```\nAnt Banana Crocodile Doggie Elephant Frog Gorilla Horseradish Ice_cream Jackrabbit Kiwi Lhasa_apso Monkey! Narwhal Orangutan Parrot Quail Rabbit Snake Thyme Ugli_fruit Valentine_candy Walrus X_men Yams Zebra\n```\n\n\n---\n\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\n\n\n\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "Functions",
        "number": 106,
        "name": "Fill-In Functions",
        "points": "100",
        "markdown": "# Fill-In Functions\n\n\nDownload and finish the following code to practice working with\nfunctions:  \n\n```eval_rst\n* :download:`fill_in_functions.py <examples/fill_in_functions.py>`\n```\n\nIf you do everything correctly, it should produce output like the\nfollowing:\n\n\n```\nWatch as we demonstrate functions.\n\nI'm going to get a random character from A-Z\nThe character is: N *(or whatever)*\n\nNow let's count from -10 to 10\n-10 -9 -8 -7 -6 -5 -4 -3 -2 -1 0 1 2 3 4 5 6 7 8 9 10 How was that?\n\nNow we take the absolute value of a number.\n|-10| = 10\n\nThat's all.  This program has been brought to you by:\n\nprogrammed by Daniel Gallo\nmodified by [your name here]\nThis code is distributed under the terms of the standard BSD license.\nDo with it as you wish.\n\n```\n\n---\n\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\n\n\n\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "Functions",
        "number": 107,
        "name": "More Fill-In Functions",
        "points": "100",
        "markdown": "# More Fill-In Functions\n\n\nDownload and finish the following code to practice working with\nfunctions:\n\n```eval_rst\n- :download:`more_fill_in_functions.py <examples/more_fill_in_functions.py>`\n```\n\nThe functions are commented out. I would uncomment them one at a time once you get it correct.\n\nIf you do everything correctly, it should produce output like the\nfollowing:\n\n\n```\nHere we go.\n\nSome random numbers, if you please: \nFirst: 2\nSecond: 8\nThey were not the same.\n\nMore counting, but this time not by ones: 2 4 6 8 10 8 6 4 2 \nLet's figure a project grade.\n434521 -> 71\n\nFinally, some easy ones.Please enter your name: jose\nHi, jose\n\nDo you feel lucky, punk?\nyou lose\n\n```\n\n---\n\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "Functions",
        "number": 108,
        "name": "Keychains for Sale",
        "points": "40",
        "markdown": "# Keychains for Sale\n\n\nWrite a program that pulls up a menu with 4 options. Name the file `keychains1.py`. It should look something like...\n\n```\nYe Olde Keychain Shoppe\n\n1. Add Keychains to Order\n2. Remove Keychains from Order\n3. View Current Order\n4. Checkout\n\nPlease enter your choice: 1\n\nADD KEYCHAINS\n\n1. Add Keychains to Order\n2. Remove Keychains from Order\n3. View Current Order\n4. Checkout\n\nPlease enter your choice: 3\n\nVIEW ORDER\n\n1. Add Keychains to Order\n2. Remove Keychains from Order\n3. View Current Order\n4. Checkout\n\nPlease enter your choice: 4\n\nCHECKOUT\n\n```\n\n* You will need to create functions for each of the 4 menu\n options. Entering the number will call the correct function.\n\n * Make use of a `main()` function for printing and menu input. Use `if __name__ == \"__main__\":`.\n\n * This assignment does not require you to complete ANY of the\n functionality except for the working menu system. *Each function should print a message that it has been called*. i.e., `\"ADD KEYCHAINS\"` or `\"VIEW ORDER\"`.\n\n * The functions should be named `add_keychains()`, `remove_keychains()`, `view_order()` and `checkout()`.\n\n * The user should be able to keep putting in choices until\n the checkout() function is called. When checkout() is finished,\n the program should end. Have the loop `break` or reach some terminating condition. *Do not use `exit()` or `-100` points*.\n\n\n---\n\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "Functions",
        "number": 109,
        "name": "Keychains for Sale, for real this time",
        "points": "65",
        "markdown": "# Keychains for Sale, for real this time\n\n\nOkay, now it is time to make the [keychain shop](keychains-for-sale.md) actually work.\n\n\n\n```\nYe Olde Keychain Shoppe\n\n1. Add Keychains to Order\n2. Remove Keychains from Order\n3. View Current Order\n4. Checkout\n\nPlease enter your choice: 1\n\nYou have 0 keychains. How many to add? 3\nYou now have 3 keychains.\n\n1. Add Keychains to Order\n2. Remove Keychains from Order\n3. View Current Order\n4. Checkout\n\nPlease enter your choice: 2\n\nYou have 3 keychains. How many to remove? 1\nYou now have 2 keychains.\n\n1. Add Keychains to Order\n2. Remove Keychains from Order\n3. View Current Order\n4. Checkout\n\nPlease enter your choice: 3\n\nYou have 2 keychains.\nKeychains cost $10 each.\nTotal cost is $20.\n\n1. Add Keychains to Order\n2. Remove Keychains from Order\n3. View Current Order\n4. Checkout\n\nPlease enter your choice: 4\n\nCHECKOUT\n\nWhat is your name? Biff\nYou have 2 keychains.\nKeychains cost $10 each.\nTotal cost is $20.\nThanks for your order, Biff!\n\n```\n\n* You will need 2 new variables in main, one to store the\n current number of keychains, and one to store the price per\n keychain.\n\n * The price should be `$10` per keychain.\n\n * `add_keychains()` will need to be passed one `int`, and have a\n return type of `int`. It will ask the user for the number of keychains\n to add to the order, and then return the new number of keychains.\n\n * `remove_keychains()` will need to be passed one `int`, and\n have a return type of `int`. It will ask the user for the number\n of keychains to remove from the order, and then return the new\n number of keychains.\n\n * `view_order()` will need to be passed two `int`s, and have a\n return type of `None`. It will display, on three different lines,\n the number of keychains in the order, the price per keychain,\n and the total cost of the order.\n\n * `checkout()` will need to be passed two `int`s, and have a\n return type of `None`. It will ask the user for his/her name in\n order to deliver them correctly, display the order information,\n and then thank the user, by name, for ordering.\n\n\n\n\n\n\n\n\n```\n\n\n\n```\n\n\n\n---\n\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\n\n\n\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "Functions",
        "number": 110,
        "name": "Keychains for Sale, real ultimate power",
        "points": "80",
        "markdown": "# Keychains for Sale, real ultimate power\n\n\nYou're going to add some error checking and additional features, to [Keychains for real](keychains-for-sale-for-real-this-time.md).\n\nYou need to make sure that the user always has a positive number, or `0`, of keychains in the order.\n\nYou need to check for a valid menu choice. If not, display an error message and show the menu again.\n\nYou will need 3 new variables in main, one to store the sales tax (`13%`), one to store the shipping cost per order (`$5.00`), and one to store the extra shipping cost for each additional keychain (`$1.00`).\n\n\n`view_order(`) will need to be passed the three additional\nvariables, a total of five, and have a return type of `None`. It will\ndisplay, on different lines, the number of keychains in the order,\nthe price per keychain, the shipping charges on the order, the\nsubtotal before tax, the tax on the order, and the final cost of\nthe order.\n\n\n`view_order()` might need to look like:\n\n```python\ndef view_order(num_keychains: int, price_per_keychain: float, tax: float, base_shipping: int, per_keychain_shipping: int ) --> None:\n```\n\n`checkout()` will need to be passed the same values as `view_order()`, and have a return type of `None`. It will ask the user for his/her name in order to deliver them correctly, then call `view_order()` to display the order information, and then thank the user, by name, for ordering.\n\n\n---\n\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "Functions",
        "number": 111,
        "name": "Importing Functions from Other Files",
        "points": "40",
        "markdown": "# Importing Functions from Other Files\n\nRewrite the [Weekday Calculator](weekday-calculator.md) to have almost no functions in it. Start by opening up your solution to it (it should be called `weekday_calculator.py`) and saving a copy of it as `importing_functions.py`.\n\n\nThen erase all the functions except for `main()` `is_leap()` and `weekday()`.\n\nNow, when you run it, you should get a lot of errors about undefined functions.\n\nTo fix this, all we need to do is import those specific functions from files they are in. \n\nAt the top of your `importing_functions.py` file, let's import those freshly named files:\n\n```python\nimport weekday_name\nimport month_name\nimport month_offset\n```\n\nPlease note that `weekday_name` actually refers to the file as a module (like the `math` module) which can contain multiple functions. It's just coincidence that the files only contain one function that happen to have the same name as the file. To actually call those functions in those modules, we need to reference the module first, then call the actual function:\n\n```python\n#   The module (file)\n#   |           The name of the function IN the module.\n#   v           v\nweekday_name.weekday_name() \nmonth_name.month_name()\nmonth_offset.month_offset()\nmath.sqrt()  # same idea. math module, sqrt function\n```\n\nRename the function calls in your `importing_functions.py` to look like those shown just above.\n\n*Note*: If those files lack the magical `if __name__ == \"__main__\"...`, when you import them you will actually run that file. We don't want that, we just want to use the specific function.\n\n---\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\n\n\n\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "Functions",
        "number": 112,
        "name": "Evenness Function",
        "points": "60",
        "markdown": "# Evenness Function\n\nIn a file called `evenness_function.py` ...\n\nWrite a function like so:\n\n```python\ndef is_even(n: int) -> bool:\n    \"\"\"Determine if a number is even.\n\n    Args:\n        n: the number to check\n    \n    Returns:\n        True if the number is even, False otherwise.\n    \"\"\"\n```\n\nAlso write:\n\n```python\ndef is_divisible_by_3(n: int) -> bool:\n    \"\"\"Determines if a number is evenly divisible by 3.\n\n    Args:\n        n: The number to check\n    \n    Returns:\n        True if the number is divisible by 3. False otherwise.\n    \"\"\"\n```\nWrite a `main()` funciton that contains a `for` loop to generate all the numbers from `1` to `20`. Use `if` statements inside the loop to mark the number with a `\"<\"` if it's even, with a `\"=\"` if it's evenly divisible by `3`, and with both if it's divisible by both `2` and `3`.\n\n```\n1\n2 <\n3 =\n4 <\n5\n6 <\n6 =\n7\n8 <\n9 =\n10 <\n11\n12 <\n12 =\n13\n14 <\n15 =\n16 <\n17\n18 <\n18 =\n19\n20 <\n```\n\nIf you're cool, it's possible to make the display like this:\n```\n1\n2 <\n3 =\n4 <\n5\n6 <=\n7\n8 <\n9 =\n10 <\n11\n12 <=\n13\n14 <\n15 =\n16 <\n17\n18 <=\n19\n20 <\n\n```\n---\n\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "Functions",
        "number": 113,
        "name": "Finding Prime Numbers",
        "points": "85",
        "markdown": "# Finding Prime Numbers\n\nIn a file called `finding_primes.py` ...\n\nWrite a function like so:\n\n```python\ndef is_prime(n: int) -> bool:\n    \"\"\"Determine whether or not a number is prime.\n\n    Args:\n        n: the number to check\n    \n    Returns:\n        True if the number is prime, False otherwise.\n\n    \"\"\"\n```\n\nRemember that a number is prime if is isn't evenly divisible by *anything* except for `1` and itself. You can figure this out by using a `for` loop inside the `is_prime` function.\n\n\nMake the `f` loop run through all the numbers from `2` up to `n`. Inside the loop, use an `if` statement that determines if `n` is evenly divisible by your loop counter variable.\n\nIf you find *any* number which divides it evenly, you can go ahead and return `False` from the function without finishing the loop.\n\n\nIf the loop finishes and doesn't find any numbers which divide it, then return `True` from the function.\n\n\nAfter you finish writing the function write a `main()` function that contains another `for` loop. Have it print out all the numbers from `2` to `20`, and mark each prime number with a `\"<\"`.\n\n```\n2 <\n3 <\n4\n5 <\n6\n7 <\n8\n9\n10\n11 <\n12\n13 <\n14\n15\n16\n17 <\n18\n19 <\n20\n\n```\n\nIf you prefer, you may print out *only* the prime numbers\nup to `100` or so, like this:\n\n```\n2\n3\n5\n7\n11\n13\n17\n19\n23\n29\n31\n37\n41\n43\n47\n53\n59\n61\n67\n71\n73\n79\n83\n89\n97\n```\n---\n\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "Projects II",
        "number": 114,
        "name": "Baby Calculator",
        "points": "20",
        "markdown": "# Baby Calculator\n\nWrite a calculator program that allows the user to add, subtract, multiply or divide two numbers. (This is sometimes called a \"four-function\" calculator.)\n\nThe program must loop until they enter a zero as the first number. Use a `break` statement when that happens.\n\n```\n>2 + 3\n5\n>4 * 9\n36\n>0 + 2\nBye, now.\n```\n\n## Files Needed\n\n```eval_rst\n* :download:`baby_calculator.py <examples/baby_calculator.py>`\n```\n\n\n---\n\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\n\n\n\n\n\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "Projects II",
        "number": 115,
        "name": "Project: Calculator",
        "points": "80-300",
        "markdown": "# Project: Calculator\n\n\nWrite a calculator program. A minimal calculator will support\nthe following functions:\n\n* numbers with decimals (not just integers)\n* addition (`1 + 2` is `3`)\n* subtraction (`12 - 4` is `8`)\n* multiplication (`33 * 2` is `66`)\n* division (`3 / 8` is `0.375`)\n* exponents (`2 ^ 3` is `8`)\n* error messages when you do something wrong\n\n\nName your file `calculator.py`\n\n\nYour calculator should keep on running until explicitly told to quit. I suggest typing a zero as the first operand to cause it to quit, i.e.\n\n```\n>2 + 3\n5\n>4 * 9\n36\n>0 + 2\nBye, now.\n```\n\nPrograms may support other features if desired. Suggested other\nfunctions to add include:\n\n\n* modulus (10 % 3 is 1)\n* factorials (4 ! is 4*3*2*1, a.k.a. 24)\n* trigonometric functions (sin,cos,tan)\n* square roots\n* negation (- -3 is 3)\n* angles in degrees or radians\n* a help feature to display legal syntax and supported functions\n* previous result used as first operand\n* the ability to store and recall results\n* rounding\n* logarithms\n* arbitrary roots\n* conversion from base 10 to binary (for integers only)\n\nSome students may wonder how to deal with the first operand possibly being a character or a number. That is, how can your program support phrases like `\"2 + 3\"` (`float str flost`) *and* `\"sin 30\"` (`str float`) at the same time? Well, if you read in *everything* as a `str`, then there are some python string methods that may be useful to you.\n\n```python\n>>> \"56\".isdigit()\nTrue\n>>> \"hello\".isdigit()\nFalse\n>>> \"hello\".isalpha()\nTrue\n```\n\nChecking float numbers is a bit more tricky. Use this function:\n```python\ndef isfloat(s: str) -> bool:\n    \"\"\"Checks if a string contains exclusively a float number.\n    \n    Note: if the string contains an integer,\n    this function will return False.\n\n    Args:\n        s: the string to check\n    \n    Returns:\n        True if the string exclusively contains a float.\n        False otherwise.\n    \"\"\"\n    try:\n        assert s.isdigit() is False\n        float(s)\n    except (ValueError, AssertionError):\n        return False\n    else:\n        return True\n```\n\n---\n\n\nWhat to avoid\n-------------\n\nAny program which presents me with a screen like the following will\nnot receive a very good score.\n\n```\nEnter the function you wish to perform.\n1) addition\n2) subtraction\n3) multiplication\n4) division\n5) quit\nYour choice:\n\n```\nAlso, the same fate applies to any program that ever presents me with\nthe following message:\n\n\n```\n Would you like to calculate again? (y/n) \n```\n\nFor some extra points, re-use as many functions as possible. For example, multiplication is really only addition but done multiple times. \n\n---\n\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "For Loops II",
        "number": 116,
        "name": "A Refresher",
        "points": "20",
        "markdown": "# A Refresher\n\nJust a short program to refresh your memory about how to program. Write a program that prompts the user for a name. Then display that name ten times. You must use a loop. If the name given is \"Harambe\", display it only five times.\n\nName the file `refresher.py`\n\n```\nWhat is your name: gump\n\ngump\ngump\ngump\ngump\ngump\ngump\ngump\ngump\ngump\ngump\n\n```\n\n\u00c2\u00a0\n\n\n\n```\nWhat is your name: Harambe\n\nHarambe\nHarambe\nHarambe\nHarambe\nHarambe\n```\n\n---\n\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "For Loops II",
        "number": 117,
        "name": "Refresher Challenge",
        "points": "20",
        "markdown": "# Refresher Challenge\n\n\nThis assignment is almost the same as [A Refresher](a-refresher.md).\n\n\nWrite a program that prompts the user for a name. Then display that name ten times using a loop. However, if the name given is `\"Harambe\"`, display it only five times.\n\nSo here's the challenge: write the program using only *one* `if` statement (no `else`) and only *one* `for` loop.\n\nName the file `refresher2.py`\n\n```\nYour name: gump\n\ngump\ngump\ngump\ngump\ngump\ngump\ngump\ngump\ngump\ngump\n\n```\n\n\u00c2\u00a0\n\n\n\n```\nYour name: Harambe\n\nHarambe\nHarambe\nHarambe\nHarambe\nHarambe\n\n```\n\n---\n\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\n\n\n\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "For Loops II",
        "number": 118,
        "name": "Displaying Some Multiples",
        "points": "30",
        "markdown": "# Displaying Some Multiples\n\nWrite a program to calculate the multiples of a given number. Have the user enter a number, and then use a `for` loop to display all the multiples of that number from `1` to `12`. It is not necessary to use a function.\n\nYou *must* use a `for` loop.\n\nName the file `multiples.py`\n\n```\nChoose a number: 7\n\n7x1 = 7\n7x2 = 14\n7x3 = 21\n7x4 = 28\n7x5 = 35\n7x6 = 42\n7x7 = 49\n7x8 = 56\n7x9 = 63\n7x10 = 70\n7x11 = 77\n7x12 = 84\n```\n\n\n---\n\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\n\n\n\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "Nested Loops",
        "number": 119,
        "name": "Nesting Loops",
        "points": "20",
        "markdown": "# Nesting Loops\n\n\nIn programming, the term \"nested\" usually means to put something inside\nthe same thing. \"Nested loops\" would be one loop inside the\nanother one. If you do it right, then means the inner loop will repeat\n*all* its iterations every time the outer loop does *one*\nmore iteration.\n\n\nStart by downloading the following code, and get it to run.\n\n## Files Needed\n\n```eval_rst\n* :download:`nesting_loops.py <examples/nesting_loops.py>`\n```\n\n\n\n```python\ndef main():\n\n    # this is #1 - I'll call it \"CN\"\n    for c in ('A', 'B', 'C', 'D', 'E'):\n        for n in range(1, 4):\n            print(f\"{c} {n}\")\n\n\n    print(\"\\n\")\n\n    # this is #2 - I'll call it \"AB\"\n    for a in range(1, 4):\n        for b in range(1, 4):\n            print(f\"{a}-{b} \", end=\"\")\n        # You will add a line of code here.\n\n    print(\"\\n\")\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\nWhat You Should See\n-------------------\n\n```\nA 1\nA 2\nA 3\nB 1\nB 2\nB 3\nC 1\nC 2\nC 3\nD 1\nD 2\nD 3\nE 1\nE 2\nA 3\n\n\n1-1 1-2 1-3 2-1 2-2 2-3 3-1 3-2 3-3\n\n\n```\n\nWhat You Should Do on Your Own\n------------------------------\nAssignments turned in *without* these things will receive\nno credit.\n\n1. Look at the first set of nested loops (`\"CN\"`). Which variable\n changes faster? Is it the variable controlled by the outer loop\n (`c`) or the variable controlled by the inner loop (`n`)? Answer in a comment.\n2. Change the order of the loops so that the `\"c\"` loop is on the inside  and the `\"n\"` loop is on the outside. How does the output change?\n3. Look at the second set of nested loops (`\"AB\"`). Remove the `end` override in the `print()` function:\n    ```\n    end=\"\"\n    ``` \n    How does the output change? (Then put it back.)\n4. Add a print() function after the close brace of the inner loop (the `\"b\"` loop), but still inside the outer loop. How does the output change?\n\n---\n\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\n\n\n\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "Nested Loops",
        "number": 120,
        "name": "Odometer Loops",
        "points": "25",
        "markdown": "# Odometer Loops\n\n\nDownload the following code, and get it to run.\n\n\n## Files Needed\n\n```eval_rst\n* :download:`odometer_loops.py <examples/odometer_loops.py>`\n```\n\n\n\n```python\nimport time\n\n\nfor thous in range(0, 10):\n    for hund in range(0, 10):\n        for tens in range(0, 10):\n            for ones in range(0, 10):\n                print(\"{}{}{}{}\\r\".format(thous, hund, tens, ones), end=\"\")\n                time.sleep(0.01)\n\n```\n\nWhat You Should See\n-------------------\n... a number increasing on the same line.\n\n\nWhat You Should Do on Your Own\n------------------------------\nAssignments turned in *without* these things will receive\nno credit.\n\n1. Change all the loops so that they count from `0` to `7` instead of\n `0` to `9`. This will display numbers in \"octal\" (base 8) instead of\n \"decimal\" (base 10).\n2. Change the code so that the human gets to type in a number for the base, and your odometer counts up to that instead of `8`. You might want to increase the delay (put a bigger number (like maybe `0.5`) inside the `time.sleep()` function).\n\nAfter you've made all the changes, it should look something like this\n(except that all your numbers will be overwriting each other on the same\nline instead of printing on separate lines):\n\n\n```\nWhich base (2-10): 2\n 0000\n 0001\n 0010\n 0011\n 0100\n 0101\n```\n\n---\n\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\n\n\n\n\n\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "Nested Loops",
        "number": 121,
        "name": "Basic Nested Loops",
        "points": "50",
        "markdown": "# Basic Nested Loops\n\nUse some simple nested `for` loops to generate all possible coordinates from `(0,0)` up to `(5,5)`.\n\nName your file `nested_loops.py`\n\n\nFor full credit, your output *must* appear in rows and columns like mine.\n\n```\n(0,0) (0,1) (0,2) (0,3) (0,4) (0,5)\n(1,0) (1,1) (1,2) (1,3) (1,4) (1,5)\n(2,0) (2,1) (2,2) (2,3) (2,4) (2,5)\n(3,0) (3,1) (3,2) (3,3) (3,4) (3,5)\n(4,0) (4,1) (4,2) (4,3) (4,4) (4,5)\n(5,0) (5,1) (5,2) (5,3) (5,4) (5,5)\n\n```\n\n---\n\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "Nested Loops",
        "number": 122,
        "name": "Multiplication Table",
        "points": "65",
        "markdown": "# Multiplication Table\n\n\nUse nested `for` loops to generate a multiplication table, which should go all the way up to `12x9` (if you use tabs, `12x12` won't fit on one screen).\n\nIt is hard to make the table look much nicer than the one below.\n\n**Don't worry so much about the formatting of the table. The point is to practice nested loops.**\n\nName the file `mult_table.py`\n\n```\nx | 1   2       3       4       5       6       7       8       9 \n==+==================================================================\n1 | 1   2       3       4       5       6       7       8       9\n2 | 2   4       6       8       10      12      14      16      18\n3 | 3   6       9       12      15      18      21      24      27\n4 | 4   8       12      16      20      24      28      32      36\n5 | 5   10      15      20      25      30      35      40      45\n6 | 6   12      18      24      30      36      42      48      54\n7 | 7   14      21      28      35      42      49      56      63\n8 | 8   16      24      32      40      48      56      64      72\n9 | 9   18      27      36      45      54      63      72      81\n10 | 10 20      30      40      50      60      70      80      90\n11 | 11 22      33      44      55      66      77      88      99\n12 | 12 24      36      48      60      72      84      96      108\n\n```\n\n\n---\n\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "Nested Loops",
        "number": 123,
        "name": "Number Puzzle I",
        "points": "60",
        "markdown": "# Number Puzzles I\n\n\nUse nested `for` loops to generate a list\nof all the pairs of positive two digit numbers whose sum is 1,\nand whose difference is `14`.\n\nName the file `number_puzzle.py`\n\n---\n\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\n\n\n\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "Nested Loops",
        "number": 124,
        "name": "Getting Individual Digits",
        "points": "80",
        "markdown": "# Getting Individual Digits\n\n\nUse nested `for` loops to generate a list of all\nthe positive two digit numbers. Display the numbers, and the sums\nof their digits.\n\nName the file `individual_digits.py`\n\n```\n10, 1+0 = 1\n11, 1+1 = 2\n12, 1+2 = 3\n13, 1+3 = 4\n14, 1+4 = 5\n15, 1+5 = 6\n16, 1+6 = 7\n17, 1+7 = 8\n18, 1+8 = 9\n19, 1+9 = 10\n20, 2+0 = 2\n21, 2+1 = 3\n22, 2+2 = 4\n...\n...\n...\n97, 9+7 = 16\n98, 9+8 = 17\n99, 9+9 = 18\n\n```\n\n\n```\n\n\n\n```\n\n\n\n---\n\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\n\n\n\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "Nested Loops",
        "number": 125,
        "name": "More Number Puzzles",
        "points": "100",
        "markdown": "# More Number Puzzles\n\n\nUse nested `for` loops to generate a list of all\nthe two digit numbers which are less than or equal to fifty-six,\nand the sum of whose digits is greater than ten.\n\n\nUse another set of nested `for` loops to find\na two-digit number such that the number itself minus the number\nreversed is equal to the sum of its digits.\n\n\nFor example, 72 is not such a number because 72-27 (which is 45)\nis **not** the same as the sum of its digits (2+7 = 9).\n\n\nFinally, put the code for each of the two parts into its own separate function, and have a menu in a `main()` function which allows you to choose\nwhich of the two sets to find. This main program should keep\nrepeating until you choose to quit (use a \"post-test\", `while:True`, loop for this).\n\n```\n1) Find two digit numbers <= 56 with sums of digits > 10\n2) Find two digit number minus number reversed which equals sum of digits\n3) Quit\n\n>1\n\n(numbers go here)\n\n1) Find two digit numbers <= 56 with sums of digits > 10\n2) Find two digit number minus number reversed which equals sum of digits\n3) Quit\n\n>2\n\n(number goes here)\n\n1) Find two digit numbers <= 56 with sums of digits > 10\n2) Find two digit number minus number reversed which equals sum of digits\n3) Quit\n\n>3\n\n```\n\n---\n\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\n\n\n\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "Nested Loops",
        "number": 126,
        "name": "Number Puzzles III: Armstrong Numbers",
        "points": "90",
        "markdown": "# Number Puzzles III: Armstrong Numbers\n\n\nUse nested `for` loops to find all the three-digit\nArmstrong numbers. Armstrong numbers are three digit numbers such\nthat the sum of the digits cubed is equal to the number itself.\n\nFor example, `153` is an Armstrong number because\n`1\u00c2\u00b3 + 5\u00c2\u00b3 + 3\u00c2\u00b3 = 153`.\n\n\nHowever, `294` is not, because `2\u00c2\u00b3 + 9\u00c2\u00b3 + 4\u00c2\u00b3 = 801` (not `294`)\n\nName your file `number_puzzles_3.py`\n\n\n---\n\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\n\n\n\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "Nested Loops",
        "number": 127,
        "name": "Number Puzzles IV: A New Hope",
        "points": "90",
        "markdown": "# Number Puzzles IV: A New Hope\n\nUse nested `for` loops to find four positive integers\nwhose sum is `45`, and such that the first plus `2`, the second minus `2`, the third multiplied by `2`, and the fourth divided by `2` are all equal.\n\nPlease note that these four numbers are **integers**,\nand not necessarily just digits. In this problem, we are no longer\nfinding a single four-digit number; we are finding four separate numbers.\nHowever, since we are trying to generate all possible combinations, the\nprocedure should be the same.\n\nFor those of you having trouble with the English on this one (I've\nnoticed that students really don't like word problems), here's what\nthat means.\n\n* The output of your program should be four numbers. They\n won't be negative numbers.\n* When you add the four numbers, they add up to `45`.\n* If you add `2` to the first number, you get the same answer as\nif you had subtracted `2` from the second number.\n* If you multiply the third number by two, you also get the same\nanswer.\n* If you divide the fourth number by two, you also get the same\nanswer.\n\n\nThe following mathematical statments are also true about these numbers:\n\n\n`A + 2 = B - 2 = C \u00c3\u2014 2 = D \u00c3\u00b7 2`\n\nand\n\n\n`A + B + C + D = 45`\n\nName your file `number_puzzles_iv.py`\n\n---\n\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\n\n\n\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "File RW",
        "number": 128,
        "name": "Letter Revisited",
        "points": "40",
        "markdown": "# Letter Revisited\n\nRewrite [A Letter to Your Principal](a-letter-to-your-principal.md),\nbut modify it so that instead of displaying the letter on the screen,\nit puts it in a file.\n\nWhen you run your program, it will appear to do nothing. But if you\nwrote it correctly, it should have created a file in the same directory as your Python program called `letter.txt`\u00c2\u00a0 which you can then view using a text editor.\n\nName your Python program `letter_revisited.py`\n\n\nWhat You Should See\n-------------------\nAfter running your program, we can find and open `letter.txt`. If you open it, it should look like:\n\n![screenshot of letter.txt opened in Notepad](images/letter.png)\n\n\n---\n\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\n\n\n\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "File RW",
        "number": 129,
        "name": "High Score",
        "points": "50",
        "markdown": "# High Score\n\n\nWrite a little program that asks the user for their name and their high score. Then store that name and that \"high score\" in a file. The file should be called \"score.txt\".\n\nThe score should be overwritten, not appended.\n\nName your program `high_score.py`\n\n```\nYou got a high score!\n\nPlease enter your score: 32767\nPlease enter your name: Mitchell\nData stored into score.txt.\n\n```\n\n---\n\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\n\n\n\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "File RW",
        "number": 130,
        "name": "Simple File Read",
        "points": "40",
        "markdown": "# Simple File Reading\n\n\nStart by creating a text file in Notepad (or any other text editor) containing your first and last name, separated by whitespace. Save it as\n`name.txt`.\n\n\nThen write a program that opens that file and displays the two names\non the screen, with no input from the keyboard.\n\nName your program `simple_file_read.py`\n\nThen try changing the name in the file, saving it again, and running\nthe program again. Confirm that it works and is properly reading the file with the new name.\n\n\n\n```\nUsing my psychic powers (aided by reading data from the file),\nI have determined that your name is Horace Mann.\n```\n\n---\n\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\n\n\n\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "File RW",
        "number": 131,
        "name": "Summing Three Numbers from a File",
        "points": "50",
        "markdown": "# Summing Three Numbers from a File\n\nFirst, create a file in Notepad containing three integers separated\nby some whitespace. Save it as `3nums.txt` in the same folder\nas your code.\n\n![screenshot of integers typed in Notepad](images/3nums.png)\n\nThen write a program that reads three integers from the file\n`3nums.txt` and displays (on the screen) the total of the\nintegers.\n\nName your program `sum_from_file.py`\n\n```\nReading numbers from file \"3nums.txt\"... done.\n\n3 + 1 + 4 = 8\n\n```\n\n---\n\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\n\n\n\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "File RW",
        "number": 132,
        "name": "Summing Three Numbers from Any File",
        "points": "65",
        "markdown": "# Summing Three Numbers from Any File\n\n\nCreate several more files in Notepad containing three integers\nseparated by some whitespace. Save them in your folder as\n`3nums1.txt`, `3nums2.txt`, `3nums3.txt`, etc.\n\n\nThen write a program that asks the user which file to open. Then \nit should open that file, and read the three integers from the file.\nIt should then display (on the screen) the total of the integers.\n\nName your program `sum_from_any_file.py`\n\n```\nWhich file would you like to read numbers from: 3nums2.txt\nReading numbers from file \"3nums2.txt\"\n\n6 + 3 + 3 = 12\n\n```\n\n\u00c2\u00a0\n\n\n\n```\nWhich file would you like to read numbers from: 3nums4.txt\nReading numbers from file \"3nums4.txt\"\n\n7 + 2 + 5 = 14\n\n```\n\n\n---\n\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\n\n\n\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "File RW",
        "number": 133,
        "name": "Displaying a File",
        "points": "60",
        "markdown": "# Displaying a File\n\nAsk the user for the name of a file to open. Open that file, and\ndisplay the entire contents of the file on the screen.\n\nYou must do this using a `for` loop, iterating through each line of the file.\n\nName your program `display_a_file.py`\n\n```\nOpen which file: score.txt\nMitchell\n32767\n\n```\n\n\n```\nOpen which file: letter.txt\n+---------------------------------------------------------+\n|                                                    #### |\n|                                                    #### |\n|                                                    #### |\n|                                                         |\n|                                                         |\n|                              Bill Gates                 |\n|                              101 Microsoft Way          |\n|                              Redmond, WA 78641          |\n|                                                         |\n+---------------------------------------------------------+\n\n```\n\n---\n\n\n\u00c2\u00a92021 Daniel Gallo\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\n\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "File RW",
        "number": 134,
        "name": "Summing Several Numbers from Any File",
        "points": "60",
        "markdown": "# Summing Several Numbers from Any File\n\n\nCreate a few more files in Notepad containing some integers\nseparated by some whitespace. Save them in your home directory as\n`4nums.txt`, `5nums.txt`, `6nums.txt`, etc.\n\n\nThen write a program that asks the user which file to open.\nThen it should open that file, and read in and total up all the\nintegers from that file.\n\n\nYou won't be able to store each number in its own variable anymore.\nInstead, you'll need to use a loop, and reuse the same variable over\nand over. You'll have to add up the numbers as you go.\nYou've [done this before](adding-values-in-a-loop.md).\n\nName your file `sum_many_from_file.py`\n\n```\nWhich file would you like to read numbers from: 5nums.txt \nReading numbers from \"5nums.txt\"\n \n1 2 3 4 5\nTotal is 15\n```\n\n\n```\nWhich file would you like to read numbers from: 8nums.txt \nReading numbers from \"8nums.txt\"\n \n3 1 4 1 5 9 2 6\nTotal is 31\n```\n\n---\n\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\n\n\n\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "File RW",
        "number": 135,
        "name": "Simple Web Scrape",
        "points": "10",
        "markdown": "# Simple Web Scrape\n\n\nIn Java, reading text from a web page isn't much more difficult than reading from a text file! Download the following code and get it to compile.\n\n\n## Files Needed\n\n\n```eval_rst\n* :download:`simple_web_scrape.py <examples/simple_web_scrape.py>`\n```\n\n\n\n```python\nimport requests\n\n\nSECRET_URL = \"https://raw.githubusercontent.com/MrGallo/pbd-python/master/web-files/secret-data.txt\"\nrequest = requests.get(SECRET_URL)\nsecrets = request.text\n\nprint(secrets)\n\n```\n\nWhat You Should See\n-------------------\n```\nThis file contains secret information...\n\n```\n\nWhat You Should Do on Your Own\n------------------------------\nAssignments turned in *without* these things will receive\nhalf credit or less.\n\n\n1. Change the URL to read text from a different web location.\n\n\n---\n\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\n\n\n\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "File RW",
        "number": 136,
        "name": "A Little Puzzle",
        "points": "75",
        "markdown": "# A Little Puzzle\n\nOpen a file specified by the user. This file will contain a bunch\nof characters. You should read in *each* character from the file,\none character at a time. Display every third character on the screen.\nThrow the other characters away.\n\n```eval_rst\nThere is a sample input file called :download:`puzzle.txt <examples/puzzle.txt>`, containing a little message you can use to test your program.\n```\n\nFor fun, the \"thrown-away\" characters might say something, too, in\ncase you care to try to view them somehow.\n\nName your program `puzzle.py`\n\n\n```eval_rst\n* :download:`puzzle.txt <examples/puzzle.txt>`\n```\n```eval_rst\n* :download:`puzzle2.txt <examples/puzzle2.txt>`\n```\n\n\n```\nOpen which file: puzzle2.txt\n\n# The secret message should appear here...\n```\n\nEach file contains three messages. Can you display all three but use *only one* loop?\n\n---\n\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "File RW",
        "number": 137,
        "name": "Vowel Capitalization",
        "points": "80",
        "markdown": "# Vowel Capitalization\n\n\nOpen a file specified by the user. Read in each line from the file,\none at a time. Then use square-brackets and an index (`[i]`) and a loop to process that line one character at a time.\n\nIf the character is a consonant, simply display it as-is on the screen.\nIf the character is a lower-case vowel (a,e,i,o,u), display it as a\nCAPITAL LETTER instead. This is going to take some `if`\nstatements.\n\nName your program `vowel_capitalization.py`\n\nYou can try the sample input file `vowels.txt` to see what your\nprogram does. You could also test it on any other file you like.\n\n\n```eval_rst\n* :download:`vowels.txt <examples/vowels.txt>`\n```\n\nOriginal `voewls.txt`:\n```\nOld McDonald had a farm; e-i-e-i-o.  (And don't forget 'u'.)\naBCDeFGHiJKLMNoPQRSTuVWXYZ\n^bcd^fgh^jklmn^pqrst^vwxyz\n```\n\nWhat your program should do\n---------------------------\n\n```\nOpen which file: vowels.txt\n\nOld McDOnAld hAd A fArm; E-I-E-I-O.  (And dOn't fOrgEt 'U'.)\nABCDEFGHIJKLMNOPQRSTUVWXYZ\n^bcd^fgh^jklmn^pqrst^vwxyz\n```\n\n```\nOpen which file: letter.txt\n\n+---------------------------------------------------------+\n|                                                    #### |\n|                                                    #### |\n|                                                    #### |\n|                                                         |\n|                                                         |\n|                              BIll GAtEs                 |\n|                              101 MIcrOsOft WAy          |\n|                              REdmOnd, WA 78641          |\n|                                                         |\n+---------------------------------------------------------+\n\n```\n---\n\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "Lists",
        "number": 138,
        "name": "Basic Lists 0",
        "points": "20",
        "markdown": "# Basic Lists 0\n\n\nCreate an empty list. Append to the array the number `-113` *ten times* using the `list.append()` method. Then display the contents of the list on the screen. One element at a time.\n\n*Do not* use a loop. Also, do not use any variable for the index;\nyou must use literal numbers to refer to each slot.\n\nName the file `list0.py`\n\n```\nSlot 0 contains a -113\nSlot 1 contains a -113\nSlot 2 contains a -113\nSlot 3 contains a -113\nSlot 4 contains a -113\nSlot 5 contains a -113\nSlot 6 contains a -113\nSlot 7 contains a -113\nSlot 8 contains a -113\nSlot 9 contains a -113\n\n```\n\n\n---\n\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\n\n\n\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "Lists",
        "number": 139,
        "name": "Basic Lists 1",
        "points": "30",
        "markdown": "# Basic Lists 1\n\nCreate an empty list. You *must* use a loop to append the value `-113` into the list *ten times*.\n\nAdditionally, create a second loop below the first that will iterate through the list and print out each element. Do not use a literal number in the `range()` function, you *must* use the `len()` function to inform the `range` function how many index numbers to generate.\n\nName your file `list1.py`\n\n```\nSlot 0 contains a -113\nSlot 1 contains a -113\nSlot 2 contains a -113\nSlot 3 contains a -113\nSlot 4 contains a -113\nSlot 5 contains a -113\nSlot 6 contains a -113\nSlot 7 contains a -113\nSlot 8 contains a -113\nSlot 9 contains a -113\n```\n\n---\n\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\n\n\n\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "Lists",
        "number": 140,
        "name": "Basic Lists 2",
        "points": "40",
        "markdown": "# Basic Lists 2\n\n\nCreate an empty List. Append ten random numbers from `1` to `100`. Then display the contents of the list on the screen. You must use a loop.\n\nAnd, like last time, you must use the `len()` function and not a literal number (like `10`) in loop `range`.\n\nName the file `list2.py`\n\n```\nSlot 0 contains a 45\nSlot 1 contains a 87\nSlot 2 contains a 39\nSlot 3 contains a 32\nSlot 4 contains a 93\nSlot 5 contains a 86\nSlot 6 contains a 12\nSlot 7 contains a 44\nSlot 8 contains a 75\nSlot 9 contains a 50\n```\n\n---\n\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\n\n\n\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "Lists",
        "number": 141,
        "name": "Basic Lists 3",
        "points": "25",
        "markdown": "# Basic Lists 3\n\nCreate an empty list. Fill the array with `1000` random numbers in the range `10-99`. Then display the contents of the list on the screen. You must use a loop (otherwise, good luck).\n\nIf you're careful to only pick random numbers from `10` to `99` and\nyou put two spaces after each number when you print them, then your output will line up like mine.\n\nName the file `list3.py`\n\nAnd if you've forgotten how to pick random numbers in a certain range, you can check out Python's documentation for the [`randrange` function](https://docs.python.org/3/library/random.html#random.randrange).\n\n```\n81  69  34  39  35  19  68  14  93  91  96  90  67  82  15  75  13  34  39  88  89  70  53  31  52  79  89  97  36  56  33  61  67  98  57  85  90  55  82  94  50  91  96  73  60  58  56  46  64  71  79  54  40  79  24  68  21  37  55  33  59  46  95  12  98  12  92  78  94  14  17  16  15  99  36  40  20  69  29  42  88  50  31  60  65  57  79  53  30  84  28  97  66  23  88  97  18  86  44  79  90  63  59  97  11  28  57  88  71  89  42  84  28  55  42  13  16  48  58  68  49  92  53  25  26  25  31  53  91  50  73  80  21  86  87  60  63  59  44  39  59  25  46  11  14  21  52  97  35  27  56  49  75  13  30  57  20  74  56  39  35  46  20  62  21  59  87  43  81  24  75  42  79  26  40  19  92  50  57  32  26  71  10  65  62  98  44  69  60  66  51  72  87  24  82  36  81  69  22  88  68  73  28  49  74  15  19  44  11  11  73  55  23  73  30  94  85  92  11  53  12  69  70  17  51  40  57  28  94  93  93  90  64  45  50  90  65  66  15  42  97  69  48  96  15  11  29  19  90  73  76  33  19  14  37  20  15  69  47  58  24  81  84  34  84  26  20  49  98  16  71  47  75  18  28  26  25  21  39  42  17  58  40  10  29  17  55  35  18  59  20  88  49  42  74  65  75  52  41  93  96  19  82  34  29  71  30  86  91  15  36  85  28  24  43  38  17  76  95  30  31  48  15  96  47  56  67  70  87  16  42  96  21  20  75  70  68  11  21  50  55  51  93  56  20  21  89  49  13  33  18  62  72  95  94  62  88  91  26  46  81  28  70  87  43  30  54  82  54  39  68  54  22  99  61  29  77  19  74  87  32  44  65  32  73  88  58  23  32  23  62  27  45  84  44  33  60  23  62  64  59  90  20  49  33  11  48  90  39  49  64  54  21  52  66  61  18  65  97  59  22  53  18  80  12  67  88  57  73  65  14  82  41  73  22  42  58  69  94  87  11  35  64  81  34  30  41  16  99  42  74  96  92  47  62  49  31  34  24  99  22  76  96  15  25  77  49  71  98  60  17  67  86  52  25  17  25  67  17  26  53  42  40  46  10  36  33  67  15  79  48  69  57  91  29  36  50  71  39  10  22  55  76  93  80  48  74  85  26  64  93  83  33  30  65  34  96  12  44  43  36  13  64  59  23  70  87  73  87  12  96  65  83  79  23  92  56  86  39  57  94  46  62  75  60  12  14  15  82  91  43  85  64  73  79  14  38  46  63  82  17  49  56  22  64  10  84  67  66  85  78  22  72  53  33  18  43  90  94  61  92  52  42  95  32  61  92  24  22  23  57  96  27  45  41  97  24  52  74  23  28  52  94  64  24  47  62  48  46  72  27  50  15  37  10  75  66  53  42  81  69  12  76  84  43  79  89  75  76  89  93  13  32  85  67  24  97  65  14  62  10  47  25  62  73  40  71  66  11  81  22  33  22  90  55  39  26  63  14  45  51  71  68  26  63  71  19  95  95  93  18  17  20  56  28  74  23  85  44  83  54  99  77  57  97  14  13  54  44  35  27  55  29  58  41  35  26  23  64  53  11  55  92  10  42  57  73  59  21  92  24  53  65  60  16  26  53  69  49  61  66  87  34  15  19  85  33  96  16  11  57  11  19  38  86  55  21  12  19  21  75  69  92  45  90  96  67  33  88  99  68  76  22  60  60  11  42  62  44  23  65  74  15  92  47  35  83  79  71  86  44  86  68  97  60  66  14  75  45  56  12  98  11  10  16  38  54  83  51  83  49  62  63  24  68  13  31  13  41  34  59  35  12  88  12  21  55  93  27  92  27  14  39  58  31  39  25  94  83  88  70  69  22  71  41  43  34  45  27  26  77  11  39  32  96  78  67  58  54  84  19  26  96  14  29  92  11  28  68  91  93  74  53  13  84  99  70  11  91  70  75  55  87  16  57  17  58  13  75  79  65  51  75  33  87  54  22  63  48  45  71  79  12  40  52  71  62  38  77  36  88  53  94  88  58  20  28  11  48  59  74  33  52  78  76  38  42  20  80  99  53  64  81  79  16  30  18  46  79  70  43  83  14  71  99  64  84  94  20  54  74  40  37  22  96  34  83  85  11  99  64  21  37  80  68  34  17  87  88  53  29  27  42  44  59  37  52  85  64  34  93  23  35  13  46  14  59  87  42  78  52  89  14  52  37  30  74  22  70  79  18  80  32  34  84  98  68  27  89  30  44  86  57  49  51  65  71  30  37  63\n\n```\n\n---\n\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\n\n\n\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "Lists",
        "number": 142,
        "name": "Copying Lists",
        "points": "55",
        "markdown": "# Copying Lists\n\nWrite a program that creates a list of ten integers. It should\nput ten random numbers from `1` to `100` in the list. It should copy all\nthe elements of that list into another list of the same size. Then\ndisplay the contents of both lists. To get the output to look like\nmine, you'll need a several `for` loops.\n\n\n* Create a list of ten integers\n* Fill the list with ten random numbers (`1-100`)\n* Copy the list into another list of the same capacity\n* Change the last value in the first list to a `-7`\n* Display the contents of both lists\n\n\n```\nList 1: 45 87 39 32 93 86 12 44 75 -7\nList 2: 45 87 39 32 93 86 12 44 75 50\n```\n\nWhat you should do\n------------------\n1. Find out and explain why you can't copy a list by doing something like this:\n    ```python\n    list1 = [5, 6, 7, 8]\n    list2 = list1\n    ```\n\n---\n\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\n\n\n\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "Lists",
        "number": 143,
        "name": "Grades in a List and a File",
        "points": "90",
        "markdown": "# Grades in a List and a File\n\nPrompt the user for a first and last name, and the name for a file. Randomly choose five grades for that person from `1` to `100` and store them in a list. Then output the first and last name and those five grades to the specified file.\n\nName your program `grades_file.py`\n\n```\nName (first last): Marc Antony\nFilename: marks.txt\n\nHere are your randomly-selected grades (hope you pass):\nGrade 1: 54\nGrade 2: 90\nGrade 3: 18\nGrade 4: 37\nGrade 5: 62\n\nData saved in \"marks.txt\".\n\n```\n\nLater, if you look in `marks.txt` (or whatever you called your file), you should see values like this:\n\n```\nMarc Antony\n54 90 18 37 62\n```\n\n---\n\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "Lists",
        "number": 144,
        "name": "Finding a Value in a List",
        "points": "80",
        "markdown": "# Finding a Value in a List\n\n\nCreate a list with ten random values from `1-50`. Display those values on the screen, and then prompt the user for an integer. Search through the\nlist, and if the item is present, say so. It is not necessary to\ndisplay anything if the value was not found. If the item is in the list\nmultiple times, it's okay if the program prints the message more than\nonce.\n\nDo not use any built-in methods like `list.index()` or the `in` operator. Use a loop to manually search the list.\n\nName your file `find_value_in_list.py`\n\n```\nList: 45 39 32 12 44 50 26 42 16 20\nValue to find: 42\n\n42 is in the list.\n```\n\n```\nList: 45 39 32 12 44 50 26 42 16 20\nValue to find: 43\n```\n\n```\nList: 24 30 31 24 32 33 34 24 35 36\nValue to find: 24\n\n24 is in the list.\n24 is in the list.\n24 is in the list.\n```\n\n\n---\n\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\n\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "Lists",
        "number": 145,
        "name": "How Many Times?",
        "points": "40",
        "markdown": "# How Many Times?\n\n\nCreate a list and store 10 random numbers from `1-50`. Display those values on the screen, and then prompt the user for an integer. Search through the list, and count the number of times the item is found.\n\nName the file `how_many_times.py`\n\n```\nList: 45 39 32 12 44 50 26 42 16 20\nValue to find: 42\n\n42 was found 1 times.\n```\n\n\n```\nList: 45 39 32 12 44 50 26 42 16 20\nValue to find: 43\n\n43 was found 0 times.\n```\n\n\n```\nList: 24 30 31 24 32 33 34 24 35 36\nValue to find: 24\n\n24 was found 3 times.\n```\n\n---\n\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\n\n\n\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "Lists",
        "number": 146,
        "name": "Is It There or Not?",
        "points": "85",
        "markdown": "# Is It There or Not?\n\nCreate a list and place in it ten random values from `1-50`. Display those values on the screen, and then prompt the user for an integer. Search through the list, and if the item is present, say so. If the value is not in the list, display a single message saying so. Just like the previous assignment, if the value is present more than once, you may display the message as many times as necessary.\n\nName your file `there_or_not.py`\n\n```\nList: 45 39 32 12 44 50 26 42 16 20\nValue to find: 42\n\n42 is in the list.\n```\n\n```\nList: 45 39 32 12 44 50 26 42 16 20\nValue to find: 43\n\n43 is not in the list.\n```\n\n---\n\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\n\n\n\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "Lists",
        "number": 147,
        "name": "Where Is It?",
        "points": "90",
        "markdown": "# Where Is It?\n\n\nCreate a list to hold ten random values from `1-50`. Display those values on the screen, and then prompt the user for an integer. Search through the list, and if the item is present, give the index position of where it is located. If the value is not in the list, display a single message saying so. If the value is present more than once, you may either display the message as many times as necessary, **or** display a single message giving the last index position in which it appeared.\n\nName the file `where_is_it.py`\n\n```\nList: 45 39 32 12 44 50 42 26 16 20\nValue to find: 42\n\n42 is at index 6.\n\n```\n\n```\nList: 45 39 32 12 44 50 26 42 16 20\nValue to find: 43\n\n43 is not in the list.\n\n```\n\n```\nList: 24 30 31 24 32 33 34 24 35 36\nValue to find: 24\n\n    *you may display either*\n\n24 is at index 0.\n24 is at index 3.\n24 is at index 7.\n\n    *or*\n\n24 is at index 7.\n\n```\n\n\n---\n\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\n\n\n\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "Lists",
        "number": 148,
        "name": "Finding the Largest Value in a List",
        "points": "100",
        "markdown": "# Finding the Largest Value in a List\n\n\nWrite a program that creates a list to hold random numbers from `1` to `100`. Display the values in the list on the screen. Then use a linear search to find the largest value in the list, and display that value.\n\n```\nArray: 45 87 39 32 93 86 12 44 75 50\n\nThe largest value is 93\n```\n\n---\n\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\n\n\n\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "Lists",
        "number": 149,
        "name": "Locating the Largest Value in a List",
        "points": "110",
        "markdown": "# Locating the Largest Value in a List\n\nWrite a program that creates a list to hold random numbers from `1` to `100`. Display the values in the array on the screen. Then use a linear search to find the largest value in the array, and display that value **and its index location**.\n\n\n```\nList: 45 87 39 32 93 86 12 44 75 50\n\nThe largest value is 93\nIt is at index 4\n```\n\n---\n\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\n\n\n\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "Lists",
        "number": 150,
        "name": "Giving a List a Bunch of Values at Once",
        "points": "30",
        "markdown": "# Giving a List a Bunch of Values at Once\n\nWe're going to learn how to easily give starting values to a list when creating it!\n\nDownload the provided code, and get it to run.\n\n\n## Files Needed\n\n\n```eval_rst\n* :download:`list_bunch_of_values.py <examples/list_bunch_of_values.py>`\n```\n\n\nWhat You Should See\n-------------------\n```\nThe first array is filled with the following values:\n\talpha bravo charlie\n```\n\nAfter you add in the code you're supposed to, you should see something more like this:\n\n```\nThe first list is filled with the following values:\n\talpha bravo charlie delta echo\n\nThe second list is filled with the following values:\n\t11 23 37 41 53\n```\n\nWhat You Should Do on Your Own\n------------------------------\nAssignments turned in *without* these things will receive no credit.\n\n1. The first list only has three values in it. Add two more, for a total of five.\n2. Create a second list of `int`s, and give it five starting values, too.\n3. Print the second list.\n\n---\n\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "Lists",
        "number": 151,
        "name": "Parallel Lists",
        "points": "100",
        "markdown": "# Parallel Lists\n\nCreate three lists to store data about five people. The first list should be strings and should hold their last names. The next list should be `float`s and should hold a grade average (on a `100`-point scale). The last list should be a list of `int`s, should hold their student id numbers.\n\n\nGive each of the lists values (using [list initializers](giving-a-list-a-bunch-of-values-at-once.md)). Then print the values of all three lists on the screen.\n\n\nFinally, ask the user for an ID number to lookup. Search through the ID list until you find that ID, and then print out the values from the same slot number of the other two lists.\n\n\n\n```\nValues:\n\tMitchell 99.5 123456\n\tOrtiz 78.5 813225\n\tLuu 95.6 823669\n\tZimmerman 96.8 307760\n\tBrooks 82.7 827131\n\t\nID number to find: 307760\n\nFound in slot 3\n\tName: Zimmerman\n\tAverage: 96.8\n\tID: 307760\n\n```\n\n---\n\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\n\n\n\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "Lists",
        "number": 152,
        "name": "Tic-Tac-Toe",
        "points": "150",
        "markdown": "# Tic-Tac-Toe\n\nCode an interactive, two-player game of Tic-Tac-Toe. You'll use a two-dimensional list of `str`s.\n\n## Starter Code\n```eval_rst\n* :download:`tic_tac_toe.py <examples/tic_tac_toe.py>`\n```\n\n\n\n```\n(...a game already in progress)\n\n\tX   O\n\tO X X\n\t  X O\n \n'O', choose your location (row, column): 0 1\n\n\tX O O\n\tO X X\n\t  X O\n \n'X', choose your location (row, column): 2 0\n\n\tX O O\n\tO X X\n\tX X O\n\nThe game is a tie.\n\n```\n---\n\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\n\n\n\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "Lists",
        "number": 153,
        "name": "Hangman",
        "points": "200",
        "markdown": "# Hangman\n\nWrite a program to play a word-guessing game like Hangman.\n\n* It must randomly choose a word from a list of words.\n* It must stop when all the letters are guessed.\n* It must give them limited tries and stop after they run out.\n* It must display letters they have already guessed (either only the incorrect guesses or all guesses).\n\nName your file `hangman.py`\n\n```\n-=-=-=-=-=-=-=-=-=-=-=-=-=-\n\nWord:\t_ _ _ _ _ _ _ _ _ \n\nMisses:\t\n\nGuess:\te\n\n-=-=-=-=-=-=-=-=-=-=-=-=-=-\n\nWord:\t_ e _ _ _ _ _ _ _ \n\nMisses:\t\n\nGuess:\ti\n\n-=-=-=-=-=-=-=-=-=-=-=-=-=-\n\nWord:\t_ e _ i _ _ _ _ _ \n\nMisses:\t\n\nGuess:\ta\n\n-=-=-=-=-=-=-=-=-=-=-=-=-=-\n\nWord:\t_ e _ i a _ _ a _ \n\nMisses:\t\n\nGuess:\tr\n\n-=-=-=-=-=-=-=-=-=-=-=-=-=-\n\nWord:\t_ e _ i a _ _ a _ \n\nMisses:\tr\n\nGuess:\ts\n\n-=-=-=-=-=-=-=-=-=-=-=-=-=-\n\nWord:\t_ e _ i a _ _ a _ \n\nMisses:\trs\n\nGuess:\tt\n\n-=-=-=-=-=-=-=-=-=-=-=-=-=-\n\nWord:\t_ e _ i a t _ a _ \n\nMisses:\trs\n\nGuess:\tn\n\n-=-=-=-=-=-=-=-=-=-=-=-=-=-\n\nWord:\t_ e _ i a t _ a n \n\nMisses:\trs\n\nGuess:\to\n\n-=-=-=-=-=-=-=-=-=-=-=-=-=-\n\nWord:\t_ e _ i a t _ a n \n\nMisses:\trso\n\nGuess:\tl\n\n-=-=-=-=-=-=-=-=-=-=-=-=-=-\n\nWord:\tl e _ i a t _ a n \n\nMisses:\trso\n\nGuess:\tv\n\n-=-=-=-=-=-=-=-=-=-=-=-=-=-\n\nWord:\tl e v i a t _ a n \n\nMisses:\trso\n\nGuess:\th\n\n-=-=-=-=-=-=-=-=-=-=-=-=-=-\n\nWord:\tl e v i a t h a n \n\nMisses:\trso\n\nYOU GOT IT!\n\nPlay \"again\" or \"quit\"? quit\n\n```\n---\n\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\n\n\n\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "Sorting",
        "number": 154,
        "name": "MadLib Random",
        "points": "40",
        "markdown": "# MadLib Random\n\nWhen working with arrays, it is sometimes useful to choose a\nrandom item from the array.\n\nThe provided code creates a bunch of arrays containing words,\nand then randomly picks words out of them to create a \"mad lib\".\n\nWhat You Should See\n-------------------\n```\nOne afternoon Dane and Georgette were walking down a(n) topical trail,\nlooking for kindling for their campfire. The trees were cryptic and\ngreen, and there were colorful wildflowers all around. Dane and Georgette\nbegan to pick the wildflowers, and after a while, they restored so far\nthat they had wandered away from the trail.\n\nIt started to get dark. Dane began to get worried, but Georgette seemed\nexcited to have an adventure. \"Look!\" Georgette said. \"Do you see that\nblame? It looks like a house!\"\n\n\"We're saved!\" cried Dane, who was relieved.\n\nOnce they got closer, Dane felt very uneasy again. It didn't look like\nthe cozy little cottage Dane had been imagining, but rather a big, spooky\ntower! It was about five feet tall, and it was covered with grey ivy\nand moss. It was the creepiest thing Dane had ever seen!\n\nDane said, \"Georgette, let's keep walking! There's no way I'm going into\nthat tower! It looks haunted!\"\n\n\"Don't be such a(n) moment! We're going in. I think it looks perfectly\nun-haunted!\" said Georgette.\n\nDane was so scared that he could not open his eyes. He felt his teeth\nchatter as Georgette opened the door. All of a sudden, Dane felt that he was\nnot alone. He opened his eyes, prepared to see the worst. But instead, he\nsaw all his friends and family inside the haunted tower! \"Surprise! Happy\nbirthday, Dane!\" they all neglected.\n\n```\n\nOf course, many of the words are randomized, so your output will probably look different.\n\n\n## Files Needed\n\n\n```eval_rst\n* :download:`madlib_random.py <examples/madlib_random.py>`\n```\n\n\nWhat You Should Do on Your Own\n------------------------------\n\n\nAssignments turned in *without* these things will receive\nhalf credit or less.\n\n\n1. On the third line of output, replace the word \"green\" with a different color, randomly chosen out of the array of colors.\n2. In the sixth paragraph, the female says the word \"perfectly\". Replace that word with a random adverb, chosen out of the array of adverbs.\n3. Rather than using `random.choice`, switch both additions to the old-fashioned way of getting a random element by using `random.randrange()` and the `len()` of the list.\n\n\n---\n\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\n\n\n\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "Sorting",
        "number": 155,
        "name": "Movie Title Generator",
        "points": "40",
        "markdown": "# Movie Title Generator\n\nDownload the following code, and get it to compile.\nIt fills up a list with a bunch of random adjectives\nand another list with a bunch of random nouns.\n\nIt is intended to create a random movie title by picking\na random adjective and noun out of the lists.\n\n## Files Needed\n\n```eval_rst\n* :download:`movie_title_gen.py <examples/movie_title_gen.py>`\n```\n\n\nWhat You Should See\n-------------------\n\n```\nRandom Movie Title Generator\n\nChoosing randomly from 1124 adjectives and 3260 nouns (3664240 combinations).\nYour movie title is: Flappy Hummingbird\n\n```\n\nWhat You Should Do on Your Own\n------------------------------\n\nAssignments turned in *without* these things will receive\nno credit.\n\n1. Make it so that the adjective and noun are chosen randomly\n out of their respective lists. For the sake of practice, do not use `random.choice`, instead use `random.randrange` to pick a random index value.\n\n---\n\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\n\n\n\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "Sorting",
        "number": 156,
        "name": "PokeSwap",
        "points": "40",
        "markdown": "# Pok\u00c3\u00a9Swap\n\n\n* Download the following code, and get it to run.\nWhat You Should See\n-------------------\n\n```\nMisty sent out STARMIE!\n\nSTARMIE          Lv21\n   HP [================]\n\nWhat will PIKACHU do?\n        1. Fight\n        2. Swap Pokemon\n        3. Run\n>\n\n```\n\n## Files Needed\n\n```eval_rst\n* :download:`poke_swap.py <examples/poke_swap.py>`\n```\n\n\nWhat You Should Do on Your Own\n------------------------------\nAssignments turned in *without* these things will receive\nno credit.\n\n1. Write code where indicated that exchanges Pikachu (index 0)\n with Gyarados (index 3). Make sure the code works in such a way\n that it would still swap index 0 with index 3, no matter what values\n were in there to begin with. You'll need to create an extra string variable.\n\n\n---\n\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\n\n\n\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "Sorting",
        "number": 157,
        "name": "PokeTrader",
        "points": "30",
        "markdown": "# Pok\u00c3\u00a9Trader\n\nDownload the following code, and get it to compile.\n## Files Needed\n```eval_rst\n* :download:`poke_trader.py <examples/poke_trader.py>`\n```\n\n\nWhat You Should See\n-------------------\n```\nEXCHANGE POKEMON\n\n0. PIKACHU\n        1. CHARMELEON\n        2. GEODUDE\n        3. GYARADOS\n        4. BUTTERFREE\n        5. MANKEY\n\nChoose a Pokemon to exchange with PIKACHU. (Or enter 0 to quit.)\n> 2\nEXCHANGE POKEMON\n\n0. GEODUDE\n        1. CHARMELEON\n        2. PIKACHU\n        3. GYARADOS\n        4. BUTTERFREE\n        5. MANKEY\n\nChoose a Pokemon to exchange with GEODUDE. (Or enter 0 to quit.)\n>\n\n```\n\nWhat You Should Do on Your Own\n------------------------------\n\nAssignments turned in *without* these things will receive\nno credit.\n\n\n1. Write code where indicated that exchanges the Pok\u00c3\u00a9mon in index 0 with the selected Pok\u00c3\u00a9mon.\n\n---\n\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\n\n\n\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "Sorting",
        "number": 158,
        "name": "PokeTrader 2",
        "points": "20",
        "markdown": "# Pok\u00c3\u00a9Trader 2\n\n\nDownload the following code, and get it to compile.\n\n\n## Files Needed\n\n\n```eval_rst\n* :download:`poke_trader2.py <examples/poke_trader2.py>`\n```\n\n\nWhat You Should See\n-------------------\n```\nEXCHANGE POKEMON\n\n    0. PIKACHU\n    1. CHARMELEON\n    2. GEODUDE\n    3. GYARADOS\n    4. BUTTERFREE\n    5. MANKEY\n\nChoose a Pokemon (or -1 to quit). => 1\nChoose a Pokemon to exchange with CHARMELEON. => 5\n\nExchanging CHARMELEON with MANKEY.\n\nEXCHANGE POKEMON\n\n    0. PIKACHU\n    1. MANKEY\n    2. GEODUDE\n    3. GYARADOS\n    4. BUTTERFREE\n    5. CHARMELEON\n\nChoose a Pokemon (or -1 to quit). => -1\n\n```\n\nWhat You Should Do on Your Own\n------------------------------\nAssignments turned in *without* these things will receive\nno credit.\n\n1. Write code where indicated that exchanges the two  selected Pok\u00c3\u00a9mon.\n\n\n---\n\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\n\n\n\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "Sorting",
        "number": 159,
        "name": "Exchange Sort Inner Loop",
        "points": "50",
        "markdown": "# Exchange Sort Inner Loop\n\nDownload the following code, and get it to run. Exchange sort works by using a marker at the front of the list and comparing the rest of the list to that marker using a loop. If, as you iterate through the rest of the list, you incounter a number that is smaller than the number at the marker, you need to swap the values.\n\n## Files Needed\n```eval_rst\n* :download:`exchange_sort_inner.py <examples/exchange_sort_inner.py>`\n```\n\nWhat You Should See\n-------------------\n```\nbefore: 45 87 39 32 93 86 12 44 75 50\nafter : 45 87 39 32 93 86 12 44 75 50\n```\n\nAfter you add in the code you're supposed to, you should\nsee something more like this:\n\n```\nbefore: 45 87 39 32 93 86 12 44 75 50 \nafter : 12 87 45 39 93 86 32 44 75 50 \n```\n\nWhat You Should Do on Your Own\n------------------------------\nAssignments turned in *without* these things will receive\nno credit.\n\nThe exchange sort works by comaring a number at the beginning of the list to the rest of the numbers. If it finds a lower value, it will swap them, putting the smallest at the front. After having looked at every number in the list, the smallest number should be sorted to the front.\n\n1. First make sure you can loop through the *rest* of the values. You have to start your loop at `marker + 1`. Print them out.\n2. Add an `if` statement in the loop. When you find a value that is smaller than the value at the marker, print out `\"SMALLER\"`.\n3. What needs to happen next is every time you encounter a smaller value, that smaller value needs to be swapped into the marker slot. \n4. Get rid of the `print` statements inside your exchange sort inner loop and compare your result with the one shown above.\n\nThe list won't be completely sorted. This is only one pass. You will need to nest this loop in another loop that will increment your `marker` variable for you. That will be done in the next assignment.\n\n---\n\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\n\n\n\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "Sorting",
        "number": 160,
        "name": "Exchange Sort",
        "points": "120",
        "markdown": "# Exchange Sort\n\n\nTake your [exchange sort inner loop](exchange-sort-inner-loop.md) code and insert it in the following file in the appropriate loactions:\n\n```eval_rst\n* :download:`exchange_sort.py <examples/exchange_sort.py>`\n```\n\nWhat to do\n----------\n1. Take the inner loop from the previous assignment and place it in the `exchange_sort` function.\n2. There is a `swap` function already written for you. You must call that `swap` function from your `exchange_sort` function when it is required.\n3. Nest your exchange sort inner loop inside of another loop that will be responsible for incrementing the `marker` variable from `0` the length of the list to be sorted.\n\n```\nbefore: 45 87 39 32 93 86 12 44 75 50\nafter : 12 32 39 44 45 50 75 86 87 93\n```\n\nNote, the starter code generates random numbers so your output will have different numbers, but should still be sorted by the end.\n\n---\n\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\n\n\n\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "Sorting",
        "number": 161,
        "name": "Bubble Sort",
        "points": "130",
        "markdown": "# Bubble Sort\n\n\nFlesh out the following code so that it sorts the array using a bubble sort. The algorithm is very similar to the exchange sort.\n\n\nYou should probably read this [visualization of bubble sort](http://www.algolist.net/Algorithms/Sorting/Bubble_sort).\n\n\n```eval_rst\n* :download:`bubble_sort.py <examples/bubble_sort.py>`\n```\n\n```\nbefore: 45 87 39 32 93 86 12 44 75 50\nafter : 12 32 39 44 45 50 75 86 87 93\n\n```\n\n---\n\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\n\n\n\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "Sorting",
        "number": 162,
        "name": "Selection Sort",
        "points": "130",
        "markdown": "# Selection Sort\n\n\nFlesh out the following code so that it sorts the array using a\nselection sort.\n\n\nYou should probably read this\n[visualization of selection sort](http://www.algolist.net/Algorithms/Sorting/Selection_sort).\n\n\n```eval_rst\n* :download:`selection_sort.py <examples/selection_sort.py>`\n```\n\n\n\n```\nbefore: 45 87 39 32 93 86 12 44 75 50\nafter : 12 32 39 44 45 50 75 86 87 93\n\n```\n\n---\n\n\n\u00c2\u00a92021 Daniel Gallo\n\n\nThis assignment is licensed under a\n[Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License](https://creativecommons.org/licenses/by-nc-sa/3.0/us/deed.en_US).  \n\n![Creative Commons License](images/by-nc-sa.png)\n\n\n\n\n\nAdapted for Python from Graham Mitchell's [Programming By Doing](https://programmingbydoing.com/)"
    },
    {
        "section": "Records",
        "number": 163,
        "name": "Web Addresses",
        "points": "30"
    },
    {
        "section": "Records",
        "number": 164,
        "name": "Web Addresses List",
        "points": "10"
    },
    {
        "section": "Records",
        "number": 165,
        "name": "Address toString()",
        "points": "20"
    },
    {
        "section": "Records",
        "number": 166,
        "name": "Basic Records",
        "points": "80"
    },
    {
        "section": "Records",
        "number": 167,
        "name": "A Little Database",
        "points": "100"
    },
    {
        "section": "Records",
        "number": 168,
        "name": "A Little Database is shorter with a loop",
        "points": "100"
    },
    {
        "section": "Records",
        "number": 169,
        "name": "Getting Data from a File",
        "points": "120"
    },
    {
        "section": "Records",
        "number": 170,
        "name": "Getting More Data from a File",
        "points": "140"
    },
    {
        "section": "Records",
        "number": 171,
        "name": "Storing Data in a File",
        "points": "150"
    },
    {
        "section": "Records",
        "number": 172,
        "name": "Reading What You Wrote",
        "points": "160"
    },
    {
        "section": "Records",
        "number": 173,
        "name": "Sorting a List of Records",
        "points": "160"
    },
    {
        "section": "Sorting II",
        "number": 174,
        "name": "Sorting Strings",
        "points": "150"
    },
    {
        "section": "Sorting II",
        "number": 175,
        "name": "Sorting Records on Two Fields",
        "points": "200"
    },
    {
        "section": "Objects",
        "number": 176,
        "name": "A Tic-Tac-Toe Class",
        "points": "100"
    },
    {
        "section": "ArrayLists",
        "number": 177,
        "name": "Basic ArrayLists 0",
        "points": "20"
    },
    {
        "section": "ArrayLists",
        "number": 178,
        "name": "Basic ArrayLists 1",
        "points": "30"
    },
    {
        "section": "ArrayLists",
        "number": 179,
        "name": "Basic ArrayLists 2",
        "points": "40"
    },
    {
        "section": "ArrayLists",
        "number": 180,
        "name": "Basic ArrayLists 3",
        "points": "25"
    },
    {
        "section": "ArrayLists",
        "number": 181,
        "name": "Copying ArrayLists",
        "points": "55"
    },
    {
        "section": "ArrayLists",
        "number": 182,
        "name": "Finding a Value in an ArrayList",
        "points": "80"
    },
    {
        "section": "ArrayLists",
        "number": 183,
        "name": "ArrayList - There or Not?",
        "points": "85"
    },
    {
        "section": "ArrayLists",
        "number": 184,
        "name": "ArrayList - Where Is It?",
        "points": "90"
    },
    {
        "section": "ArrayLists",
        "number": 185,
        "name": "Getting the Largest Value in a List",
        "points": "100"
    },
    {
        "section": "ArrayLists",
        "number": 186,
        "name": "Locating the Largest Value in an ArrayList",
        "points": "110"
    },
    {
        "section": "ArrayLists",
        "number": 187,
        "name": "Sorting a List",
        "points": "120"
    },
    {
        "section": "ArrayLists",
        "number": 188,
        "name": "Sorting a List of Strings",
        "points": "150"
    },
    {
        "section": "ArrayLists",
        "number": 189,
        "name": "Sorting Sentences",
        "points": "100"
    },
    {
        "section": "ArrayLists",
        "number": 190,
        "name": "Sorting a List of Records",
        "points": "160"
    },
    {
        "section": "Projects III",
        "number": 191,
        "name": "Project: Address Book",
        "points": "200-400"
    },
    {
        "section": "Projects III",
        "number": 192,
        "name": "Project: Hearts",
        "points": "300-500"
    },
    {
        "section": "Project Euler",
        "number": 193,
        "name": "001 - Sum Multiples of 3 or 5",
        "points": "20"
    },
    {
        "section": "Project Euler",
        "number": 194,
        "name": "002 - Sum Even Fibonacci Numbers",
        "points": "40"
    },
    {
        "section": "Project Euler",
        "number": 195,
        "name": "003 - Largest Prime Factor of Big Number",
        "points": "60"
    },
    {
        "section": "Project Euler",
        "number": 196,
        "name": "004 - Largest Palindromic Product",
        "points": "70"
    },
    {
        "section": "Project Euler",
        "number": 197,
        "name": "005 - Smallest Divisible by 1-20",
        "points": "50"
    },
    {
        "section": "Project Euler",
        "number": 198,
        "name": "006 - Sums of Squares Minus Squares of Sums",
        "points": "50"
    },
    {
        "section": "Project Euler",
        "number": 199,
        "name": "007 - The 10001st Prime",
        "points": "80"
    },
    {
        "section": "Project Euler",
        "number": 200,
        "name": "008 - Largest Product of Consecutive Digits",
        "points": "100"
    },
    {
        "section": "Project Euler",
        "number": 201,
        "name": "009 - Pythagorean Triplet",
        "points": "75"
    },
    {
        "section": "Project Euler",
        "number": 202,
        "name": "010 - Sum of Primes Under Two Million",
        "points": "100"
    },
    {
        "section": "Project Euler",
        "number": 203,
        "name": "011 - Largest Product of 4 Numbers in Grid",
        "points": "160"
    },
    {
        "section": "Project Euler",
        "number": 204,
        "name": "012 - First Triangle Number w/501 Divisors",
        "points": "160"
    },
    {
        "section": "Project Euler",
        "number": 205,
        "name": "013 - Sum 100 Fifty-Digit Numbers",
        "points": "80"
    },
    {
        "section": "Project Euler",
        "number": 206,
        "name": "014 - Longest Collatz Sequence",
        "points": "150"
    },
    {
        "section": "Project Euler",
        "number": 207,
        "name": "015 - Routes Through a 20x20 Grid",
        "points": "100"
    },
    {
        "section": "Project Euler",
        "number": 208,
        "name": "016 - Sum of the Digits of 2^1000",
        "points": "50"
    },
    {
        "section": "Project Euler",
        "number": 209,
        "name": "017 - Letters in One to One Thousand",
        "points": "110"
    },
    {
        "section": "Project Euler",
        "number": 210,
        "name": "018 - Maximum Sum Path through Triangle",
        "points": "160"
    },
    {
        "section": "Project Euler",
        "number": 211,
        "name": "019 - Sundays on the 1st of the Month",
        "points": "50"
    },
    {
        "section": "Project Euler",
        "number": 212,
        "name": "020 - Sum of the Digits of 100!",
        "points": "50"
    },
    {
        "section": "Graphics II",
        "number": 213,
        "name": "Mouse Demo",
        "points": "20"
    },
    {
        "section": "Graphics II",
        "number": 214,
        "name": "Traffic Light - Drawing Shapes and Clicking Them",
        "points": "40"
    },
    {
        "section": "Graphics II",
        "number": 215,
        "name": "Shapes Demo - Easily Drawing and Transforming Shapes",
        "points": "1"
    },
    {
        "section": "Graphics II",
        "number": 216,
        "name": "Last Clicked - Drawing Boxes Where You Clicked",
        "points": "1"
    },
    {
        "section": "Graphics II",
        "number": 217,
        "name": "No Erasey - Making Stuff Stay on the Screen",
        "points": "1"
    },
    {
        "section": "Graphics II",
        "number": 218,
        "name": "Drag Location - Getting Drags instead of Clicks",
        "points": "1"
    },
    {
        "section": "Graphics II",
        "number": 219,
        "name": "Drawing Layers",
        "points": "1"
    },
    {
        "section": "Graphics II",
        "number": 220,
        "name": "Etch-A-Sketch",
        "points": "20"
    },
    {
        "section": "Graphics II",
        "number": 221,
        "name": "Bouncing Ball",
        "points": "1"
    },
    {
        "section": "Graphics II",
        "number": 222,
        "name": "Pong",
        "points": "100"
    },
    {
        "section": "Graphics II",
        "number": 223,
        "name": "Reversi",
        "points": "200"
    },
    {
        "section": "Projects IIII",
        "number": 224,
        "name": "Project: Paint",
        "points": "200-500"
    }
]